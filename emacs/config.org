#+OPTIONS: toc:4
#+PROPERTY: header-args :tangle no :noweb yes :results no :eval no :comments noweb
#+TITLE: Tor's init

* Overview
I've made many attempts at structuring my Emacs configuration, so why not try once more.

Mistakes from the past:
1. Not descriptive enough comments with each package to know how to set it up properly.
   - Need to provide more context.
2. For a while we didn't use =straight.el=, but now we are so we should make use of everything it provides.
   - For example, we should use =straight-freeze-versions=.
3. Having an =init.el= file in addition to a =init.org= is too god-damn tempting!
   - When messing around with something, it's just too easy to mess around with `=init.el= instead of =init.org=.
   - One easy fix is to just remove the usage of =init.el= "completely", i.e. we use something like =(org-babel-load-file ...)= to evaluate the =init.org= (which then generates the =init.el=)
     - Good example: https://emacs.stackexchange.com/a/3147
   - So what we're going to do is that we'll include a /slightly/ customized version of =org-babel-load-file= for which we can specify which file to tangle to.
     - Allows us to define the full configs by specifying two different blocks:
       - =init-minimal.el=: defines a minimalist config which can be useful in scenarios where I don't need all the bells and whistles, e.g. if I want to do some remote editing through thet terminal.
       - =init-full.el=: the full init file I use on my personal devices.
 
So. The strategy will be as follows.
1. Different topics / packages get their own section.
2. Every src-block should have a unique name.
3. In the end, each "full" config should have it's ownn src-block where we use =:noweb yes= to include other src-blocks + =:comments noweb= so we can get a sense of where things came from by looking at the resulting =init.el= file.
4. We create a =Makefile= which does all the necessary stuff on a new installation, i.e.:
   1. Run =emacs= to tangle the file.
   2. Link the files we want linked, e.g. snippets.

Some other significant changes:
1. Replace the beloved =helm= with =vertico= + =marginalia= + =consult= + =embark=.
2. Replace =org-ref= with =citar= and =org-cite.el=.

* Table of Contents
:PROPERTIES:
:TOC:      :include all :depth 4
:END:

Here's a TOC (because github can't render it), curtosy =org-make-toc=.

:CONTENTS:
- [[#overview][Overview]]
- [[#table-of-contents][Table of Contents]]
- [[#loading-the-config][Loading the config]]
- [[#package-management-straightel-and-use-package][Package management: straight.el and use-package]]
- [[#general-utilities][General utilities]]
  - [[#basic-variables][Basic variables]]
  - [[#utility-functions][Utility functions]]
  - [[#make-format-time-string-consistent-across-os-time-settings][Make format-time-string consistent across OS time settings]]
  - [[#file-backup][File backup]]
  - [[#custom-settings-in-seperate-file][Custom settings in seperate file]]
  - [[#compatel][compat.el]]
  - [[#dashel][dash.el]]
  - [[#result][Result]]
- [[#os-specific-setup][OS specific setup]]
  - [[#linux][Linux]]
  - [[#windows-linux-subsystem][Windows Linux Subsystem]]
  - [[#result][Result]]
- [[#the-holy-quaternity-vertico--orderless--marginalia--consult][The Holy Quaternity: vertico + orderless + marginalia + consult]]
- [[#user-interface][User interface]]
  - [[#discovery-and-help][Discovery and help]]
    - [[#which-keyel][which-key.el]]
  - [[#fonts--text][Fonts & Text]]
    - [[#scaling][Scaling]]
    - [[#special][Special]]
    - [[#pretty][Pretty]]
    - [[#centering-and-stuff][Centering and stuff]]
  - [[#navigation][Navigation]]
    - [[#ace-windowel][ace-window.el]]
    - [[#avyel][avy.el]]
  - [[#result][Result]]
- [[#project-management][Project management]]
  - [[#projectileel][projectile.el]]
  - [[#git][Git]]
  - [[#treemacsel][treemacs.el]]
  - [[#result][Result]]
- [[#workspace-management][Workspace management]]
  - [[#perspectiveel][perspective.el]]
  - [[#result][Result]]
- [[#editing][Editing]]
  - [[#general][General]]
  - [[#undo--redo][Undo & redo]]
  - [[#result][Result]]
- [[#terminal-emulation][Terminal emulation]]
  - [[#vtermel][vterm.el]]
  - [[#result][Result]]
- [[#completion--assistants][Completion & assistants]]
  - [[#yasnippet][yasnippet]]
  - [[#companyel][company.el]]
  - [[#copilotel][copilot.el]]
  - [[#chatgptel][chatgpt.el]]
  - [[#result][Result]]
- [[#viewing-non-text-files][Viewing non-text files]]
  - [[#pdf-toolsel][pdf-tools.el]]
  - [[#result][Result]]
- [[#programming--markup][Programming & Markup]]
  - [[#prog-mode][prog-mode]]
  - [[#flycheck][Flycheck]]
  - [[#latex][LaTeX]]
  - [[#markdown][Markdown]]
  - [[#polymode][Polymode]]
  - [[#yaml][YAML]]
  - [[#eglot][eglot]]
  - [[#treesitter][treesitter]]
  - [[#r-or-ess][R (or ess)]]
  - [[#julia][Julia]]
  - [[#python][Python]]
  - [[#emacs-lisp][Emacs lisp]]
  - [[#jupyter][Jupyter]]
  - [[#ein][Ein]]
  - [[#graphviz--dot][GraphViz + Dot]]
  - [[#result][Result]]
- [[#org][Org]]
  - [[#tors-reading-list][Tor's reading list]]
  - [[#agenda-utilities][Agenda utilities]]
  - [[#org][org]]
  - [[#babel][Babel]]
    - [[#ob-async][ob-async]]
  - [[#exports][Exports]]
    - [[#org-reveal][org-reveal]]
    - [[#by-backend-allow-backend-specific-headers-in-exports][by-backend: allow backend-specific headers in exports]]
  - [[#navigation][Navigation]]
    - [[#org-sidebarel][org-sidebar.el]]
  - [[#other-stuff][Other stuff]]
    - [[#proper-handling-of-ansi-color-codes][Proper handling of ANSI color codes]]
    - [[#org-download][org-download]]
    - [[#org-ref][org-ref]]
    - [[#org-contrib][org-contrib]]
    - [[#org-present][org-present]]
  - [[#personal-customization][Personal customization]]
    - [[#make-c-c-c-v-c-n-and-c-c-c-v-c-p-handle-inline-call][Make C-c C-v C-n and C-c C-v C-p handle inline CALL]]
    - [[#display-inline-images-in-subtree-only][Display inline images in subtree only]]
    - [[#command-for-inserting-src-block-below][Command for inserting src block below]]
    - [[#make-include--useful-outside-of-exports][Make #+INCLUDE: ... useful outside of exports]]
    - [[#result][Result]]
  - [[#result][Result]]
- [[#citations][Citations]]
- [[#email][Email]]
  - [[#aim][Aim]]
  - [[#authinfo][~/.authinfo]]
  - [[#python-3][Python 3]]
  - [[#retrieving-emails-using-offlineimap][Retrieving emails using offlineimap]]
    - [[#integration-with-different-providers][Integration with different providers]]
    - [[#authentication][Authentication]]
  - [[#interfacing-with-emails-using-notmuch][Interfacing with emails using notmuch]]
  - [[#setting-up-cron-for-periodic-checking][Setting up cron for periodic checking]]
  - [[#writing-messages][Writing messages]]
    - [[#disabling-automatic-line-break][Disabling automatic line-break]]
    - [[#signature][Signature]]
  - [[#resulting-config][Resulting config]]
- [[#themes][Themes]]
  - [[#doom-themesel][doom-themes.el]]
  - [[#doom-modelineel][doom-modeline.el]]
  - [[#custom-hooks][Custom hooks]]
  - [[#result][Result]]
- [[#interacting-with-the-outside-of-emacs][Interacting with the outside of Emacs]]
  - [[#emacs-anywhere][Emacs anywhere]]
  - [[#org-protocolel-and-org-capture-extension-for-firefox--chrome][org-protocol.el and  (for Firefox & Chrome)]]
- [[#result][Result]]
  - [[#full-config][Full config]]
  - [[#minimalist-config][Minimalist config]]
:END:

* Loading the config
As mentioned in the overview, we're going to take the following approach in main init file:
#+begin_src emacs-lisp :tangle init.el
(require 'org)

;; Raises an error if a noweb reference cannot be resolved.
(setq org-babel-noweb-error-all-langs t)

;; A copy-paste from https://github.com/bzg/org-mode/blob/bd468136dd1a2172302b3ec980c5e6b6e327d683/lisp/org.el#L249-L279
;; but with the option of specifying the tangled file `file-out'.
;; Note that if blocks have specified a `:tangle' header, only those matching `file-out'
;; will indeed be tangled.'
(defun my/org-babel-load-file (file &optional file-out compile)
  "Load Emacs Lisp source code blocks in the Org FILE to FILE-OUT.
This function exports the source code using `org-babel-tangle'
and then loads the resulting file using `load-file'.  With
optional prefix argument COMPILE, the tangled Emacs Lisp file is
byte-compiled before it is loaded."
  (interactive "fFile to load: \nP")
  (let ((tangled-file (if file-out file-out (concat (file-name-sans-extension file) ".el"))))
    ;; Tangle only if the Elisp file is older than the Org file.
    ;; Catch the case when the .el file exists while the .org file is missing.
    (unless (file-exists-p file)
      (error "File to tangle does not exist: %s" file))
    (when (file-newer-than-file-p file tangled-file)
      (org-babel-tangle-file file
                             tangled-file
                             (rx string-start
                                 (or "emacs-lisp" "elisp")
                                 string-end))
      ;; Make sure that tangled file modification time is
      ;; updated even when `org-babel-tangle-file' does not make changes.
      ;; This avoids re-tangling changed FILE where the changes did
      ;; not affect the tangled code.
      (when (file-exists-p tangled-file)
        (set-file-times tangled-file)))
    (if compile
	    (progn
	      (byte-compile-file tangled-file)
	      (load-file (byte-compile-dest-file tangled-file))
	      (message "Compiled and loaded %s" tangled-file))
      (load-file tangled-file)
      (message "Loaded %s" tangled-file))))

;; Actually load the file we're interested in.
(my/org-babel-load-file
 ;; Use `file-truename' to handle symbolic links.
 (file-truename (expand-file-name "config.org" user-emacs-directory))    ;; <= this file
 (file-truename (expand-file-name "init-full.el" user-emacs-directory))) ;; <= the tangled file
#+end_src

If we instead wanted to load the minimalist file, we would just replace the last part in the above by

#+begin_src emacs-lisp
(my/org-babel-load-file
 (file-truename (expand-file-name "config.org" user-emacs-directory))
 (file-truename (expand-file-name "init-minimal.el" user-emacs-directory)))
#+end_src

* Package management: =straight.el= and =use-package=
#+name: pkg-management
#+begin_src emacs-lisp
;; straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(defun my/straight-installed-p (package)
  "Check if PACKAGE is installed (according to `straight.el')."
  (straight--installed-and-buildable-p
   ;; `format' allows us to handle both strings and symbols.
   (gethash (format "%s" package) straight--recipe-cache)))

;; use-package.el: Makes configuring the packages much easier.
(straight-use-package 'use-package)

;; Use `straight.el` by default when calling `use-package`.
(setq straight-use-package-by-default t)

;; Allow us to "require" system packages to be present using `:ensure-system-package'
;; in `use-package' blocks.
(use-package use-package-ensure-system-package)
#+end_src

* General utilities
** Basic variables
#+name: basics--variables
#+begin_src emacs-lisp 
;; Customize user interface.
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)

(setq inhibit-startup-screen t)
(column-number-mode)

;; Don't show trailing whitespace _always_. It's annoying.
(setq-default show-trailing-whitespace nil)
(setq-default indicate-empty-lines t)
(setq-default indicate-buffer-boundaries 'left)

;; Consider a period followed by a single space to be end of sentence.
(setq sentence-end-double-space nil)

;; Use spaces, not tabs, for indentation.
(setq-default indent-tabs-mode nil)

;; Display the distance between two tab stops as 4 characters wide.
(setq-default tab-width 4)

;; Indentation setting for various languages.
(setq c-basic-offset 4)
(setq js-indent-level 2)
(setq css-indent-offset 2)

;; Highlight matching pairs of parentheses.
(setq show-paren-delay 0)
(show-paren-mode)

;; Move the point to bottom/top when using `C-v' and `M-v', respectively,
;; rather than just trying to scroll.
(setq scroll-error-top-bottom t)

;; Disable blinking cursor.
(setq-default visible-cursor nil)
;; (blink-cursor-mode 0) ;; Should be unnecessary on Emacs >24?

;; Use `y' and `n' instead of `yes' and `no'.
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Utility functions
#+name: basics--utility-functions
#+begin_src emacs-lisp
(defun not-nil-p (x)
  "Return `t` if X is not nil."
  (not (not x)))
#+end_src

** Make =format-time-string= consistent across OS time settings
#+name: basics--format-time-string-consistency
#+begin_src emacs-lisp
;; Ensures that we're always going to format the string according to EN locale.
;; Setting `system-time-locale' to `"C"' or something doesn't work for daemon-mode.
;; This is copy-paste from https://kisaragi-hiu.com/blog/2019-10-09-format-time-string-today.html.
(require 'calendar)
(defun kisaragi/english-dow (&optional time zone abbreviated)
  "Return ABBREVIATED name of the day of week at TIME and ZONE.

If TIME or ZONE is nil, use `current-time' or `current-time-zone'."
  (unless time (setq time (current-time)))
  (unless zone (setq zone (current-time-zone)))
  (calendar-day-name
   (pcase-let ((`(,_ ,_ ,_ ,d ,m ,y . ,_)
                (decode-time time zone)))
     (list m d y))
   abbreviated))

(defun kisaragi/advice-format-time-string (func format &optional time zone)
  "Pass FORMAT, TIME, and ZONE to FUNC.

Replace \"%A\" in FORMAT with English day of week of today,
\"%a\" with the abbreviated version."
  (let* ((format (replace-regexp-in-string "%a" (kisaragi/english-dow time zone t)
                                           format))
         (format (replace-regexp-in-string "%A" (kisaragi/english-dow time zone nil)
                                           format)))
    (funcall func format time zone)))


(advice-add 'format-time-string :around #'kisaragi/advice-format-time-string)
#+end_src

** File backup
#+name: basics--file-backup
#+begin_src emacs-lisp
;; Write auto-saves and backups to separate directory.
(make-directory "~/.emacs.d/file-backups/auto-save/" t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/file-backups/auto-save/" t)))
(setq backup-directory-alist '(("." . "~/.emacs.d/file-backups/backup/")))

;; Do not move the current file while creating backup.
(setq backup-by-copying t)

;; Disable lockfiles.
(setq create-lockfiles nil)
#+end_src

** Custom settings in seperate file
Let's keep the customization of, well, customizable variables in a separate file so as to avoid it cluttering the =init.el=.

#+name: basics--custom-file
#+begin_src emacs-lisp
;; Write customizations to a separate file instead of this file.
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src

Then we'll insert the following at the very end of our init-file:

#+name: load-custom-file
#+begin_src emacs-lisp 
(load custom-file t)
#+end_src

** =compat.el=
#+name: basics--compat
#+begin_src emacs-lisp 
(use-package compat)
#+end_src

** =dash.el=
#+name: basics--dash
#+begin_src emacs-lisp 
(use-package dash)
#+end_src

** Result
#+name: basics
#+begin_src emacs-lisp 
<<basics--variables>>
<<basics--utility-functions>>
<<basics--format-time-string-consistency>>
<<basics--file-backup>>
<<basics--custom-file>>
<<basics--compat>>
<<basics--dash>>
#+end_src

* OS specific setup

** Linux
#+name: os-specifics--linux
#+begin_src emacs-lisp
;; Linux
(defmacro when-linux (&rest body)
  "Evaluate BODY if the system type is `gnu/linux'."
  `(when (eq system-type 'gnu/linux)
     ,@body))

(when-linux
  ;; NOTE: this will also be hit in WSL.
  (use-package exec-path-from-shell)
  (exec-path-from-shell-initialize)

  ;; use xclip to yank, allowing you to yank in terminal to the GLOBAL clipboard
  (use-package xclip
    :init (xclip-mode)))
#+end_src

** Windows Linux Subsystem
#+name: os-specifics--wsl
#+begin_src emacs-lisp
(defun tor/is-wsl-p ()
  ;; WSL: WSL1 has "-Microsoft", WSL2 has "-microsoft-standard"
  (not-nil-p (string-match "-[Mm]icrosoft" operating-system-release)))

(defmacro when-wsl (&rest body)
  "Evaluate BODY if running in WSL."
  `(when (tor/is-wsl-p)
     ,@body))

(when-wsl
  ;; Source: https://www.emacswiki.org/emacs/Emacs_and_the_Windows_Subsystem_for_Linux
  (defun wsl-copy-region-to-clipboard (start end)
    "Copy region to Windows clipboard."
    (interactive "r")
    (call-process-region start end "clip.exe" nil 0))

  (defun wsl-clipboard-to-string ()
    "Return Windows clipboard as string."
    (let ((coding-system-for-read 'dos))
      (substring				; remove added trailing \n
       (shell-command-to-string
        "powershell.exe -Command Get-Clipboard") 0 -1)))

  (defun wsl-paste-from-clipboard (arg)
    "Insert Windows clipboard at point. With prefix ARG, also add to kill-ring"
    (interactive "P")
    (let ((clip (wsl-clipboard-to-string)))
      (insert clip)
      (if arg (kill-new clip)))))
#+end_src

** Result
#+name: os-specifics
#+begin_src emacs-lisp 
<<os-specifics--linux>>
<<os-specifics--wsl>>
#+end_src

* The Holy Quaternity: =vertico= + =orderless= + =marginalia= + =consult=
I used to use =helm= to make my =M-x= experience dopey, but now I've moved to this thing.

The config is very "raw"; I effectively just copy-pasted from the respective packages to get something up and running, but I'm pretty happy with it this far.

#+name: the-holy-quaternity
#+begin_src emacs-lisp 
;; Enable vertico
(use-package vertico
  :init
  (vertico-mode)

  ;; Different scroll margin
  (setq vertico-scroll-margin 0)

  ;; Show more candidates
  (setq vertico-count 10)

  ;; Grow and shrink the Vertico minibuffer
  (setq vertico-resize nil)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle nil)
  )

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :diminish savehist-mode
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

;; Optionally use the `orderless' completion style.
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

;; Enable rich annotations using the Marginalia package
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be actived in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))

;; Example configuration for Consult
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)
  )

(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
  ;; strategy, if you want to see the documentation from multiple providers.
  (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

(use-package consult-notes
  :straight (:type git :host github :repo "mclear-tools/consult-notes")
  :commands (consult-notes
             consult-notes-search-in-all-notes
             ;; if using org-roam 
             ;; consult-notes-org-roam-find-node
             ;; consult-notes-org-roam-find-node-relation
             )
  :config
  (setq consult-notes-file-dir-sources '(("Name"  ?n  "~/org-blog/notes/"))) ;; Set notes dir(s), see below
  ;; Set org-roam integration, denote integration, or org-heading integration e.g.:
  ;; (setq consult-notes-org-headings-files '("~/path/to/file1.org"
  ;;                                          "~/path/to/file2.org"))
  (consult-notes-org-headings-mode)
  (when (locate-library "denote")
    (consult-notes-denote-mode)))
#+end_src


* User interface
** Discovery and help
*** =which-key.el=
#+name: ui--which-key
#+begin_src emacs-lisp
;; which-key.el: Provides suggestions/completions for keybindings upon use.
(use-package which-key
  :diminish which-key-mode ;; hide form mode-line
  :config (which-key-mode))
#+end_src
** Fonts & Text
*** Scaling
#+name: ui--default-text-scale
#+begin_src emacs-lisp
;; default-text-scale.el: Allows decreasing/increasing text size globally
;; rather than on a per-buffer basis.
(use-package default-text-scale
  :bind (("C-M-=" . default-text-scale-increase)
         ("C-M--" . default-text-scale-decrease)))
#+end_src
*** Special
#+name: ui--hl-todo
#+begin_src emacs-lisp
;; hl-mode.el: Provides highlighting for TODO, FIXME, etc.
(use-package hl-todo
  :hook (prog-mode . hl-todo-mode)
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))
#+end_src
*** Pretty
#+name: ui--prettify-symbols
#+begin_src emacs-lisp
(use-package prettify-symbols-mode
  :straight nil
  :ensure nil
  :hook (prog-mode . prettify-symbols-mode)
  :init
  ;; Fontification is deactivated upon marker-enter.
  (setq prettify-symbols-unprettify-at-point 'right-edge))
#+end_src

Languages should then set the local variable =prettify-symbols-alist= on their own, e.g. see [[*Julia][Julia]].
*** Centering and stuff
#+name: ui--visual-fill-column
#+begin_src emacs-lisp
(use-package visual-fill-column
  :ensure t
  :hook
  ;; Hook `visual-line-mode' to `org-mode' and others.
  (text-mode . visual-line-mode)
  (org-mode . visual-line-mode)
  (notmuch-show-mode . visual-line-mode)
  ;; And then hook `visual-fill-column-mode' to `visual-line-mode'.
  (visual-line-mode . visual-fill-column-mode)
  :custom
  (visual-fill-column-width 120)
  (visual-fill-column-center-text t))
#+end_src
** Navigation
*** =ace-window.el=
#+name: ui--ace-window
#+begin_src emacs-lisp
;; ace-window.el: Allows you to jump between windows. Super-useful when you're using more than 2 windows.
;; HACK: Only load if we're using a GUI. For some reason `ace-window' making it so that
;; switching between windows inserts 'I's and 'O's.
(use-package ace-window
  ;; :ensure nil
  ;; :defer t
  ;; We might have multiple Emacs frames open, all using the same server.
  ;; In these cases it is usually undesired to have `ace-window' suggest
  ;; opening Emacs windows we can't even see. In addition, we usually then
  ;; end up with a huge number of candidates.
  ;; This limits the candidates that we can jump to to the current frame.
  :custom (aw-scope 'frame)
  ;; Feel free to change the binding.
  :bind ("M-]" . ace-window))
#+end_src
*** =avy.el=
#+name: ui--avy
#+begin_src emacs-lisp 
;; avy.el: Allows you to jump to words by specifying the first character.
(use-package avy
  ;; Feel free to change the binding.
  :bind ("M-j" . avy-goto-word-or-subword-1))
#+end_src

** Result
#+name: ui
#+begin_src emacs-lisp
<<ui--which-key>>
<<ui--default-text-scale>>
<<ui--hl-todo>>
<<ui--prettify-symbols>>
<<ui--visual-fill-column>>
<<ui--ace-window>>
<<ui--avy>>
#+end_src

* Project management
** =projectile.el=
#+name: project--projectile
#+begin_src emacs-lisp
;; projectile.el: A _bunch_ of utility functionality for working with projects, e.g. rename everywhere
;; in a project.
;; It'll automatically detect if something is a project using different heuristics, e.g.
;; if you have a `.git` file in a parent directory.
(use-package projectile
  :ensure t
  :diminish projectile-mode ;; hide from mode-line since it'll be activated everywhere
  :bind-keymap ("C-c p" . projectile-command-map)
  :config
  (progn
    (setq projectile-completion-system 'default)
    (setq projectile-enable-caching t)
    (setq projectile-indexing-method 'alien)
    (add-to-list 'projectile-globally-ignored-files "node-modules")
    (projectile-global-mode)))

;; Use project name obtained from `projectile' as the default name for the tab.
(defun tor/name-tab-by-project-or-default ()
  "Return project name if in a project, or default tab-bar name if not.
The default tab-bar name uses the buffer name."
  (let ((project-name (projectile-project-name)))
    (if (string= "-" project-name)
        (tab-bar-tab-name-current)
      (projectile-project-name))))

(setq tab-bar-tab-name-function #'tor/name-tab-by-project-or-default)
#+end_src

** Git
#+name: project--git
#+begin_src emacs-lisp
;; magit.el: Objectively the best interface for working with Git-related stuff ever.
(use-package magit
  :config
  ;; Make `magit' look for the password in `~/.authinfo'.
  ;; Useful if you're working with, say, Overleaf where SSH is not an option for git.
  (add-hook 'magit-process-find-password-functions
            'magit-process-password-auth-source))
;; forge.el: Magit's interface to different repo hosts, e.g. Github, Gitlab.
(use-package forge)

;; Makes it easy to create links to git repositories from Emacs.
(use-package git-link
  :ensure t
  :config (setq git-link-use-commit t))
#+end_src

** =treemacs.el=
#+name: project--treemacs
#+begin_src emacs-lisp
(use-package treemacs)
(use-package treemacs-all-the-icons)
(use-package treemacs-projectile)
#+end_src

** Result
#+name: project
#+begin_src emacs-lisp
<<project--projectile>>
<<project--git>>
;; <project--treemacs> ;; TODO: Do we need this?
#+end_src

* Workspace management

** =perspective.el=
#+name: workspace--perspective
#+begin_src emacs-lisp 
;; For handling multiple workspaces in Emacs.
(use-package perspective
  :custom
  (persp-mode-prefix-key (kbd "C-x x"))
  :init
  (persp-mode))

;; Integrate it with `projectile'.
(use-package persp-projectile)
#+end_src

** Result
#+name: workspace
#+begin_src emacs-lisp
<<workspace--perspective>>
#+end_src

* Editing
** General
#+name: editing--smartparens
#+begin_src emacs-lisp
;; smartparens.el: Automatic insertion of pairs of characters.
(use-package smartparens
  :config
  (require 'smartparens-config)
  (add-hook 'prog-mode-hook 'turn-on-smartparens-mode)
  (add-hook 'prog-mode-hook 'show-paren-mode t))
#+end_src

** Undo & redo
#+name: editing--undo-tree
#+begin_src emacs-lisp
;; undo-tree.el: Tree-based undo-mechanism.
;; NOTE: To install, see https://github.com/zachcurry/emacs-anywhere.
(use-package undo-tree
  :straight (undo-tree :build (:not native-compile))
  :diminish undo-tree-mode
  :init (global-undo-tree-mode))
#+end_src

** Result
#+name: editing
#+begin_src emacs-lisp 
<<editing--smartparens>>
<<editing--undo-tree>>
#+end_src

* Terminal emulation
** =vterm.el=
#+name: terminal-emulation--vterm
#+begin_src emacs-lisp
(use-package vterm
  :config (setq vterm-buffer-name-string "*vterm [%s]*"))
#+end_src

** Result
#+name: terminal-emulation
#+begin_src emacs-lisp
<<terminal-emulation--vterm>>
#+end_src

* Completion & assistants
** =yasnippet=
#+name: completion--yasnippet
#+begin_src emacs-lisp
;; yasnippet.el: Snippet engine.
(use-package yasnippet
  ;; Enable globally.
  :init (yas-global-mode)
  :config
  ;; Enable nested triggering of snippets.
  (setq yas-triggers-in-field t)
  ;; Ensures that the indentation is done after my choosing.
  (setq yas-indent-line 'fixed)
  )

;; yasnippet-snippets.el: A huge collection of useful snippets.
(use-package yasnippet-snippets)
#+end_src


** =company.el=
#+name: completion--company
#+begin_src emacs-lisp 
;; company.el: Autocomplete backend. Other packages implement frontends for this,
;; e.g. auto-completer for Python.
(use-package company
  :ensure t
  :hook
  (prog-mode . company-mode))
#+end_src

** =copilot.el=
#+name: completion--copilot
#+begin_src emacs-lisp 
(use-package copilot
  :after company
  :straight (copilot
             :host github
             :repo "zerolfx/copilot.el"
             :files ("dist" "*.el"))
  :ensure t
  :hook
  (prog-mode . copilot-mode)
  :config
  ;; disable inline previews
  (delq 'company-preview-if-just-one-frontend company-frontends)

  ;; make `julia-ts-mode` point to `julia`.
  (add-to-list 'copilot-major-mode-alist '("julia-ts" . "julia"))

  ;; Unbind deprecated navigation bindings from `company'.
  (require 'bind-key)
  (unbind-key "M-p" company-active-map)
  (unbind-key "M-n" company-active-map)

  ;; Add bindings for `copilot'
  (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
  (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)
  (define-key copilot-completion-map (kbd "M-p") 'copilot-previous-completion)
  (define-key copilot-completion-map (kbd "M-n") 'copilot-next-completion)
  (define-key copilot-completion-map (kbd "M-RET") 'copilot-accept-completion-by-word)
  (define-key copilot-completion-map (kbd "C-M-<return>") 'copilot-accept-completion-by-line)
  )
#+end_src

** =chatgpt.el=
#+name: completion--chatgpt
#+begin_src emacs-lisp 
(use-package chatgpt
  ;; We use a custom branch for a few reasons:
  ;; - Allows specification of a config, as per `chatgpt-wrapper'.
  ;; - I've made some bugfixes to make things work on newer versions of `chatgpt-wrapper'.
  :straight (:type git :host github :repo "torfjelde/ChatGPT.el" :branch "torfjelde/develop" :files ("dist" "*.el"))
  :custom
  (chatgpt-repo-path "~/.emacs.d/straight/repos/ChatGPT.el/")
  :bind ("C-c q" . chatgpt-query))
#+end_src

** Result
#+name: completion
#+begin_src emacs-lisp
<<completion--yasnippet>>
<<completion--company>>
<<completion--copilot>>
<<completion--chatgpt>>
#+end_src

* Viewing non-text files

** =pdf-tools.el=
#+name: file-viewers--pdf-tools
#+begin_src emacs-lisp 
;; pdf-tools.el: Best. PDF viewer. Ever.
;; NOTE: might need to run `(pdf-tools-install)' to install dependencies.
;; TODO: Can we find a nicer way to choose the color? And also maybe have a set of colors we can cycle through?
(defun my/pdf-annot-add-highlight-markup-annotation (arg list-of-edges &optional color)
  "Add a highlight markup annotation to the current page.

With a prefix argument ARG, use the color at point as the
highlight color.  With a double prefix argument, prompt for a color."
  (interactive
   (list
    (prefix-numeric-value current-prefix-arg)
    (pdf-view-active-region t)))
  (cond
   ((= arg 4) (setq color (car pdf-annot-color-history)))
   ((= arg 16) (setq color (pdf-annot-read-color))))
  (pdf-annot-add-highlight-markup-annotation list-of-edges color))

(use-package pdf-tools
  :ensure t
  :mode ("\\.vpdf\\.?$" . pdf-virtual-edit-mode)
  :bind (:map pdf-annot-minor-mode-map
              ("C-c C-a h" . my/pdf-annot-add-highlight-markup-annotation))
  :config
  (require 'pdf-annot)
  ;; NOTE: This is just a convenient way to make the initial color selection more convenient.
  (setq-default pdf-annot-color-history '("hot pink" "cyan" "pale turquoise" "plum" "thistle" "light sky blue" "deep sky blue" "lemon chiffon" "yellow" "light salmon" "lawn green"))
  )

(pdf-loader-install)
#+end_src

** Result
#+name: file-viewers
#+begin_src emacs-lisp 
<<file-viewers--pdf-tools>>
#+end_src

* Programming & Markup
** prog-mode
#+name: programming--prog-mode
#+begin_src emacs-lisp
(use-package prog-mode
  :straight (prog-mode :type built-in)
  :hook
  (prog-mode . display-line-numbers-mode))
#+end_src
** Flycheck
#+name: programming--flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :config
  ;; Make `flycheck' recognize the packages available in Emacs' `load-path'.
  ;; Otherwise we get complaints on every `(require ...)'.
  ;; https://github.com/flycheck/flycheck/issues/1559#issuecomment-478569550
  (setq flycheck-emacs-lisp-load-path 'inherit))
#+end_src

** LaTeX
#+name: programming--latex
#+begin_src emacs-lisp 
(use-package tex
  ;; NOTE: You might have to build Auctex manually. Checkout the `INSTALL`
  ;; file in the cloned repo.
  :straight (auctex
             :type git
             :host nil
             :repo "https://git.savannah.gnu.org/git/auctex.git")
  :custom
  (TeX-command-extra-options "-shell-escape")
  (TeX-source-correlate-start-server t)
  (TeX-macro-private nil "???")
  (TeX-parse-self t "Ensures that completion, etc. works properly.")
  (TeX-view-program-selection
   '(((output-dvi has-no-display-manager)
      "dvi2tty")
     ((output-dvi style-pstricks)
      "dvips and gv")
     (output-dvi "xdvi")
     (output-pdf "PDF Tools")
     (output-html "xdg-open"))
   "Specify the programs to use. In particular, use PDF tools for PDF viewing.")
  :config
  ;; Revert the document after compilation completes.
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  )

;; company-auctex.el: `company.el` frontend for `auctex.el`.
(use-package company-auctex
  :after (company tex)
  :hook (LaTeX-mode . company-mode)
  :init (company-auctex-init))

;; company-reftex.el: Completion of citations and labels within LaTeX commands, e.g. `\cite{}'.
(use-package company-reftex
  :after (company tex)
  :config (setq
           company-reftex-labels-regexp
           (rx "\\"
               ;; List taken from `reftex-ref-style-alist'
               (or "autoref"
                   "autopageref"
                   "Cpageref"
                   "cpageref"
                   "Cref"
                   "cref"
                   "eqref"
                   "Fref"
                   "fref"
                   "pageref"
                   "Ref"
                   "ref"
                   "vpageref"
                   "Vref"
                   "vref"
                   ;; custom stuff:
                   "propref"
                   "thmref"
                   "lemref"
                   "lemmaref"
                   "appref"
                   "assumptref"
                   "secref")
               "{"
               (group (* (not (any "}"))))
               (regexp "\\=")))
  (add-to-list 'company-backends 'company-reftex-labels)
  (add-to-list 'company-backends 'company-reftex-citations))
#+end_src

** Markdown
#+name: programming--markdown
#+begin_src emacs-lisp 
(use-package markdown-mode
  :hook
  ;; `visual-line-mode` adds word-wrap, etc.
  (markdown-mode . visual-line-mode)
  ;; Makes it so that we get automatic closing of **, etc.
  (markdown-mode . turn-on-smartparens-mode)
  )
#+end_src

** Polymode
#+name: programming--polymode
#+begin_src emacs-lisp 
;; polymode: Allows you to use multiple modes within a single buffer, e.g.
;; use `julia-mode` for highlighting, etc. in a code-block within a markdown file.
(use-package polymode)

;; poly-markdown.el: Implementation of `polymode` for markdown, allowing other modes
;; to be used within buffers with `markdown-mode` enabled.
(use-package poly-markdown
  :mode ("\\.[jJ]md" . poly-markdown-mode) ;; Also enable for .jmd files.
  :bind (:map poly-markdown-mode-map
              ("C-c '" . markdown-edit-code-block)))

;; edit-indirect.el: Allows one to parts/subsections of buffers in a separate editable buffer,
;; whose changes are reflected in the main document. This is used by `poly-markdown` to allow
;; opening code-blocks in a separate editable buffer (see the `markdown-edit-code-block` from
;; the above `poly-markdown` block).
(use-package edit-indirect
  :config (progn
            (define-key edit-indirect-mode-map (kbd "C-c C-c") nil)))
#+end_src

** YAML
#+name: programming--yaml
#+begin_src emacs-lisp 
(use-package yaml-mode)
#+end_src

** eglot
#+name: programming--eglot
#+begin_src emacs-lisp
;;; <EGLOT> configuration, pick this or the LSP configuration but not both.
;; Using Eglot with Pyright, a language server for Python.
;; See: https://github.com/joaotavora/eglot.
(use-package eglot
  :straight (eglot :type built-in))
#+end_src

** treesitter
#+name: programming--treesitter
#+begin_src emacs-lisp 
(setq treesit-language-source-alist
      '((bash "https://github.com/tree-sitter/tree-sitter-bash")
        (cmake "https://github.com/uyha/tree-sitter-cmake")
        (css "https://github.com/tree-sitter/tree-sitter-css")
        (elisp "https://github.com/Wilfred/tree-sitter-elisp")
        (go "https://github.com/tree-sitter/tree-sitter-go")
        (html "https://github.com/tree-sitter/tree-sitter-html")
        (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
        (json "https://github.com/tree-sitter/tree-sitter-json")
        (make "https://github.com/alemuller/tree-sitter-make")
        (markdown "https://github.com/ikatyang/tree-sitter-markdown")
        (python "https://github.com/tree-sitter/tree-sitter-python")
        (toml "https://github.com/tree-sitter/tree-sitter-toml")
        (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
        (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
        (yaml "https://github.com/ikatyang/tree-sitter-yaml")
        (julia "https://github.com/tree-sitter/tree-sitter-julia")))
#+end_src
** R (or =ess=)
#+name: programming--ess
#+begin_src emacs-lisp 
(use-package ess)
#+end_src

** Julia
#+name: programming--julia
#+begin_src emacs-lisp 
;; Julia
(defvar prettify-symbols-alist--julia
  '(
    ("lambda" . ?λ)
    ("->" . ?↦)
    ("=>" . ?⟹)
    ))

(defun my/set-julia-prettify-symbols-alist ()
  (setq prettify-symbols-alist prettify-symbols-alist--julia)
  ;; HACK: It seems like we need to "re-enable" the mode to load the updated `prettify-symbols-alist'.
  (prettify-symbols-mode 1))

;; Currently only need this for latex symbols.
(use-package julia-mode
  :ensure t)

(use-package julia-ts-mode
  :after (julia-mode)
  :hook
  (julia-ts-mode . eglot-ensure)
  (julia-ts-mode . my/set-julia-prettify-symbols-alist)
  :config
  ;; (add-hook 'julia-mode-hook 'my/set-julia-prettify-symbols-alist)
  )

(use-package julia-formatter
  :after (julia-ts-mode)
  :straight (julia-formatter :type git
                             :host github
                             :repo "torfjelde/julia-formatter.el"
                             :branch "torfjelde/develop"
                             :files ("julia-formatter.el" "formatter_service.jl" "Project.toml" "Manifest.toml"))
  :hook
  (julia-ts-mode . julia-formatter-mode)
  :custom
  (julia-formatter-should-compile-julia-image 'never-compile))

(use-package eglot-jl
  :after (eglot julia-ts-mode))
#+end_src

** Python
#+name: programming--python
#+begin_src emacs-lisp 
;; Python
(use-package python
  ;; TODO: use `eglot' and `pyright'.
  :hook
  (python-mode . eglot-ensure)
  )
#+end_src

** Emacs lisp
#+name: programming--emacs-lisp
#+begin_src emacs-lisp 
(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
         (ielm-mode . rainbow-delimiters-mode)
         (lisp-interaction-mode . rainbow-delimiters-mode)
         (list-mode . rainbow-delimiters-mode)))
#+end_src

** Jupyter
#+name: programming--jupyter
#+begin_src emacs-lisp
;; This is awesome _but_ requires an Emacs version built with dynamic modules.
;; See https://github.com/nnicandro/emacs-zmq for more information on this.
;; But if this has been done, then you cna uncomment the line below.
(use-package jupyter
  ;; Add after `ob-julia', because this might change `org-src-lang-modes',
  ;; which subsequently affects which mode to use for `ob-jupyter'.
  :after (org ob-julia)
  :straight (jupyter :type git
                     :host github
                     :repo "torfjelde/emacs-jupyter"
                     :branch "torfjelde/develop-v2")
  :bind (:map jupyter-repl-interaction-mode-map
              ("C-<return>" . jupyter-eval-line-or-region)
              ("C-M-<return>" . jupyter-eval-defun))
  :config
  ;; Evaluate python and julia blocks using jupyter.
  (org-babel-jupyter-override-src-block "julia")
  (org-babel-jupyter-override-src-block "python")
  (setq org-babel-default-header-args:jupyter-julia '((:async . "yes")
                                                      (:session . "jl")
                                                      (:kernel . "julia-1.8")))
  (setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                       (:session . "py")
                                                       (:kernel . "python3")))
  :hook (org-mode . (lambda () (require 'jupyter)))
  :init
  (org-babel-do-load-languages
   'org-babel-load-languages
   (append org-babel-load-languages '((jupyter . t))))
  )
#+end_src

** Ein
This is different from the =jupyter=, since this actually allows us to work with Jupyter notebooks directly in Emacs.
#+name: programming--ein
#+begin_src emacs-lisp 
(use-package ein
  :custom
  (ein:output-area-inlined-images t))
#+end_src

** GraphViz + Dot
#+name: programming--graphviz-dot
#+begin_src emacs-lisp 
(use-package graphviz-dot-mode
  :ensure t
  :hook
  (graphviz-dot-mode . company-mode)
  :config
  (setq graphviz-dot-indent-width 2))
#+end_src

** Result
#+name: programming
#+begin_src emacs-lisp
<<programming--prog-mode>>
<<programming--eglot>>
<<programming--flycheck>>
<<programming--latex>>
<<programming--markdown>>
<<programming--polymode>>
<<programming--yaml>>
<<programming--ess>>
<<programming--julia>>
<<programming--python>>
<<programming--emacs-lisp>>
<<programming--jupyter>>
<<programming--ein>>
<<programming--graphviz-dot>>
#+end_src
* Org

** Tor's reading list
I have an agenda file that is, effectively, my reading list.

This is a reading list which:
- I can add to by using =org-capture=, and it automatically figures out the new index for the item.
- Upon submitting a new item, the list will be sorted.

To achieve the above, I need to define some methods before I can define the =org-capture= templates, etc.

#+name: org--tors-reading-list
#+begin_src emacs-lisp 
;; Tor's reading list and stuff
(defun tor/element--sort-elements-by-raw-value (el1 el2)
  "Compare :raw-value of EL1 and EL2, returning true if EL2 > EL1."
  (string-greaterp (org-element-property :raw-value el2)
		   (org-element-property :raw-value el1)))

(defun tor/element--get-begin (el)
  "Get beginning of EL."
  (org-element-property :begin el))

(defun tor/element--get-end (el)
  "Get end of EL."
  (org-element-property :end el))

(defun tor/reading-list-sort (&optional level)
  "Sort reading list at LEVEL."
  (interactive)
  (let* ((i 0)
	 (headline-level (or level 1))
	 (parsed (org-element-parse-buffer))
	 (headlines (-filter (lambda (el) (= (org-element-property :level el) headline-level)) 
			    (org-element-map parsed 'headline 'identity)))
	 (start (-min (-map 'tor/element--get-begin headlines)))
	 (end (-max (-map 'tor/element--get-end headlines))))
    (delete-region start end)
    (goto-char start)
    (insert (string-join
	     ;; TODO: update indices
	     (-map
	      (lambda (el)
		(progn
		  (setq i (+ i 1))
		  (replace-regexp-in-string "* TODO [0-9]+\\."
					    (format "* TODO %03d." i)
					     el)))
	      (-map 'org-element-interpret-data
			 (sort headlines 'tor/element--sort-elements-by-raw-value)))
	     ""))))

(defun tor/reading-list--get-next-idx (&optional level category)
  "Get index for reading list at LEVEL and ."
  (let* ((headline-level (or level 1))
	 (parsed (org-element-parse-buffer))
	 (headlines (-filter (lambda (el) (and (= (org-element-property :level el) headline-level)
					  ;; FIXME: BROKEN. Grab this from the property-drawer
					  (if category
					      (org-element-property :category el)
					    t)))
			     (org-element-map parsed 'headline 'identity))))
    (+ 1 (-max
	  (or (-filter
	       (lambda (x) (not (= x 0)))
	       (-map (lambda (el)
		       (string-to-number
			(car (split-string
			      (org-element-property :raw-value el) "\\."))))
		     headlines))
	      '(0))))))

(defun tor/reading-list-next-idx ()
  (save-excursion
    (with-current-buffer (find-file-noselect "~/Dropbox/org/reading.org")
      (format "%03d" (tor/reading-list--get-next-idx)))))
#+end_src

** Agenda utilities
#+name: org--agenda-utilities
#+begin_src emacs-lisp 
(defun my/org-skip-subtree-if-priority (priority)
  "Skip an agenda subtree if it has a priority of PRIORITY.

PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
      nil)))

(defun my/pop-to-org-agenda ()
  "Visit the org agenda in the current window."
  (interactive)
  (let ((org-agenda-window-setup 'current-window))
    (org-agenda nil "c")))
#+end_src

** =org=
#+name: org--main
#+begin_src emacs-lisp 
(use-package org
  ;; Ensures that we're using the version of `org` which comes with Emacs.
  :straight (org :type built-in)
  :bind
  ("C-c c" . org-capture)
  ("C-c l" . org-store-link)
  :hook  
  ;; Use `visual-line-mode' as it gives word-wrapping, etc.
  (org-mode . visual-line-mode)
  :config
  ;; TODO: Move many of these `setq' statements to `:custom' below.
  ;; Customization for latex-preview in org-mode
  (setq org-format-latex-options '(:foreground default
                                               :background default
                                               :scale 1.5
                                               :html-foreground "steelblue"
                                               :html-background "Transparent"
                                               :html-scale 1.0
                                               :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))

  ;; During LaTeX export, try to preserve the labels defined by the user.
  (setq org-latex-prefer-user-labels t)
  ;; Hide emphasis markup.
  (setq org-hide-emphasis-markers nil)
  ;; Use bullets for lists.
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  ;; Don't query us every time we trying to evaluate code in buffers.
  (setq org-confirm-babel-evaluate nil)
  ;; Don't indent text in a section to align with section-level.
  (setq org-adapt-indentation nil)
  ;; Don't indent body of code-blocks at all.
  (setq org-edit-src-content-indentation 0)
  ;; Allow setting variables in setup-files.
  (setq org-export-allow-bind-keywords t)
  ;; Where to store the generated images from `org-latex-preivew'. This '/' at the end is VERY important.
  (setq org-preview-latex-image-directory "~/.ltximg/")
  ;; Make it so that the src block is opened in the current window when we open to edit.
  (setq org-src-window-setup 'current-window)
  ;; Necessary for header-arguments in src-blocks to take effect during export.
  (setq org-export-use-babel t)
  ;; Disable execution of code-blocks on export by default.
  (add-to-list 'org-babel-default-header-args '(:eval . "never-export"))

  ;; Don't use the actual width of an image when previewing.
  ;; Allows us to specify the width of the image using something like `#+ATTR_ORG: :width 600'.
  (setq org-image-actual-width nil)

  ;; Use `minted'.
  (setq org-latex-listings 'minted)

  ;; Make `org-goto' nice to work with.
  ;; Source: https://emacs.stackexchange.com/a/32625
  ;; Complete on outlines/headings.
  ;; This uses `completing-read' behind the scenes, hence if you have something like
  ;; `helm' or `ivy' activated, this will be used for the completion.
  (setq org-goto-interface 'outline-path-completion)
  ;; Don't try to complete headings in steps.
  (setq org-outline-path-complete-in-steps nil)

  (setq org-default-notes-file "~/Dropbox/org/gtd.org")
  (setq org-refile-targets '(("~/Dropbox/org/gtd.org" :maxlevel . 2)))

  (setq org-my-anki-file "~/Dropbox/org/anki.org")

  ;; Org-agenda / Org-capture related
  (setq org-agenda-files
        (append
         '("~/Dropbox/org/gtd.org"
           "~/Dropbox/org/school.org"
           "~/Dropbox/org/reading.org"
           "~/Dropbox/org/implement.org"
           "~/Dropbox/org/random.org")
         ;; Also add todos from consulting projects.
         (directory-files-recursively "~/Dropbox/consulting/" "\\todos.org$")))

  (require 'org-protocol)
  ;; Adds some `private/*' variables that I don't want on my Github.
  (load (expand-file-name "~/Dropbox/dotfiles/.emacs/agenda.el"))
  (setq org-capture-templates
        (append
         '(("t"        ;; shortcut
            "Todo"     ;; title
            entry      ;; type of template
            (file+headline "~/Dropbox/org/gtd.org" "Tasks")  ;; what and where to add
            "* TODO %^{Brief Description} %^g\nEntered on %U\n%?\n%i\n%a"  ;; template
            :empty-lines 1 ;; property
            )

           ("j" "Journal" entry (file+datetree "~/Dropbox/org/journal.org")
            "* %^{Description}\nEntered on %U\n%a\n%?" :empty-lines 1)

           ("i" "Idea" item (file "~/Dropbox/org/ideas.org"))

           ("s" "School" entry
            (file "~/Dropbox/org/school.org")
            "* TODO %^{Brief Description} %^{COURSE}p %^g\n%?" :empty-lines 1)

           ("r" "Reading" entry (file "~/Dropbox/org/reading.org")
            "* TODO %(tor/reading-list-next-idx). %?\nEntered on %U\n%a\n%i")

           ("R" "Research" entry (file "~/org-blog/notes/research.org")
            "* %^{Title} %^g\n:PROPERTIES:\n:DATE: %U\n:SOURCE: %a\n:END:\n%i\n%?")

           ("I" "Implement" entry (file "~/Dropbox/org/implement.org")
            "* TODO %(tor/impl-list-next-idx). %?\nEntered on %U\n%a\n%i")

           ;; NOTE: the `ANKI_DECK' property will use auto-completion from `anki-editor.el'
           ;; and thanks to the use of `anki-editor-mode' in `~/Dropbox/org/anki.org'
           ;; we also get autocomplete for the tags.
           ("a" "Anki basic"
            entry
            (file+headline org-my-anki-file "Dispatch Shelf")
            "* %U   %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Basic\n:END:%^{ANKI_DECK}p\n** Front\n%?\n** Back\n%x\n")

           ("A" "Anki cloze"
            entry
            (file+headline org-my-anki-file "Dispatch Shelf")
            "* %U   %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Cloze\n:END:%^{ANKI_DECK}p\n** Text\n%x\n** Extra\n")

           ("c" "Code"
            entry
            (file+headline "~/Dropbox/org/gtd.org" "Code")
            "* TODO %^{TITLE} %^G\n:PROPERTIES:\n:Created: %U\n:Source: %a\n:END:\n%i%?"
            :prepend t	 ; properties
            :empty-lines 1	 ; properties
            :created t	 ; properties
            :kill-buffer t)

           ;; Template for different projects.
           ;; NOTE: This is often extended by `private/org-capture-templates'.
           ("P" "Projects")

           ;; org-protocol.el
           ;; TODO: Evaluate whether or not we want to keep this.
           ("p" "Protocol" entry
            (file "~/Dropbox/org/random.org")
            "* %^{Title}\n:PROPERTIES:\n:Created: %U\n:Source: %a\n:END:\n\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?"
            :empty-lines 1
            :created t)

           ("L" "Protocol Link" entry
            (file "~/Dropbox/org/random.org")
            "* %^{TITLE}\n:PROPERTIES:\n:Created: %U\n:Source: [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n:END:\n%?"
            :empty-lines 1
            :created t)
           )
         ;; Some private capture templates.
         private/org-capture-templates))

  ;; Some custom views for `org-agenda'.
  (setq org-agenda-custom-commands
        '(("r" alltodo "" ((org-agenda-files '("~/Dropbox/org/reading.org"))))
          ("c" "My agenda view"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (agenda "" ((org-agenda-span 1)
                        (org-habit-graph-column 60)))
            ;; TODO: Do we need a weekly view too?
            (agenda "")
            (alltodo ""
                     ((org-agenda-files '("~/Dropbox/org/reading.org"))
                      (org-agenda-overriding-header "Papers (top 5):")
                      (org-agenda-max-entries 5)
                      (org-agenda-skip-function '(org-agenda-skip-subtree-if 'regexp ":BOOK:"))))
            (alltodo ""
                     ((org-agenda-files '("~/Dropbox/org/reading.org"))
                      (org-agenda-overriding-header "Readings (top 5):")
                      (org-agenda-max-entries 5)))
            (alltodo ""
                     ((org-agenda-skip-function
                       '(or (my/org-skip-subtree-if-priority ?A)
                            (org-agenda-skip-if nil '(scheduled deadline))
                            (org-agenda-skip-subtree-if 'regexp ":RECURRING:")))
                      (org-agenda-files '("~/Dropbox/org/gtd.org")))))
           ((org-agenda-compact-blocks nil)))))

  ;; Hooks.
  ;; If `flycheck` is installed, disable `flycheck` in src-blocks.
  ;; NOTE: This is maybe a bit "drastic". Could potentially just disable certain
  ;; features of `flycheck`.
  (when (my/straight-installed-p 'flycheck)
    (require 'flycheck)
    (defun disable-flycheck-in-org-src-block ()
      (flycheck-mode -1))
    (add-hook 'org-src-mode-hook 'disable-flycheck-in-org-src-block))

  ;; https://emacs.stackexchange.com/a/18146
  ;; I want this bindings for references, etc. + don't add files to agenda
  ;; often enough to warrant having a binding for it.
  (require 'bind-key)
  ;; I use these keybindings for references, etc.
  (unbind-key "C-c [" org-mode-map)
  (unbind-key "C-c ]" org-mode-map)
  ;; I like using these for partial completions, e.g. with copilot.
  (unbind-key "<M-return>" org-mode-map)
  (unbind-key "M-RET" org-mode-map)
  ;; `C-c .' is used for `org-time-stamp-active', so this seems natural.
  (unbind-key "C-c ," org-mode-map)
  (bind-key "C-c ," 'org-time-stamp-inactive org-mode-map)

  ;;;; Org-Babel ;;;;
  ;; Specify which programming languages to support in code-blocks.
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (C . t)
     (latex . t)
     (python . t)
     ;; (jupyter . t)
     ;; (julia-vterm . t)
     ;; (julia . t)
     (R . t)
     (dot . t)
     ))

  ;; Show images after execution.
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)   

  :custom
  ;; Now that we have `org-cite.el`, we can use stuff like CSL.
  (org-cite-export-processors
   '((latex biblatex)
     (t csl)))
  ;; TODO: Maybe just clone the repo from init if it doesn't exist?
  (org-cite-csl-styles-dir "/home/tor/Projects/public/styles/")

  ;; Latex stuff.
  (org-format-latex-header
   "\\documentclass{article}
\\usepackage[usenames]{color}
[PACKAGES]
[DEFAULT-PACKAGES]
\\pagestyle{empty}             % do not remove
% The settings below are copied from fullpage.sty
\\setlength{\\textwidth}{\\paperwidth}
\\addtolength{\\textwidth}{-3cm}
\\setlength{\\oddsidemargin}{1.5cm}
\\addtolength{\\oddsidemargin}{-2.54cm}
\\setlength{\\evensidemargin}{\\oddsidemargin}
\\setlength{\\textheight}{\\paperheight}
\\addtolength{\\textheight}{-\\headheight}
\\addtolength{\\textheight}{-\\headsep}
\\addtolength{\\textheight}{-\\footskip}
\\addtolength{\\textheight}{-3cm}
\\setlength{\\topmargin}{1.5cm}
\\addtolength{\\topmargin}{-2.54cm}")

  (org-latex-default-packages-alist
   '(("AUTO" "inputenc" t
      ("pdflatex"))
     ("T1" "fontenc" t
      ("pdflatex"))
     ("" "graphicx" t nil)
     ("" "grffile" t nil)
     ("" "longtable" nil nil)
     ("" "wrapfig" nil nil)
     ("" "rotating" nil nil)
     ("normalem" "ulem" t nil)
     ("" "amsmath" t nil)
     ("" "textcomp" t nil)
     ("" "amssymb" t nil)
     ("" "capt-of" nil nil)
     ("breaklinks=true" "hyperref" nil nil)
     ("" "mathpazo" t nil)
     ("" "eulervm" t nil)
     ("" "minted" t nil)))

  (org-preview-latex-process-alist
   '((dvipng :programs
             ("latex" "dvipng")
             :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust
             (1.0 . 1.0)
             :latex-compiler
             ("latex -interaction nonstopmode -output-directory %o %f")
             :image-converter
             ("dvipng -D %D -T tight -bg 'Transparent' -o %O %f"))
     (dvisvgm :programs
              ("latex" "dvisvgm")
              :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :image-input-type "dvi" :image-output-type "svg" :image-size-adjust
              (1.7 . 1.5)
              :latex-compiler
              ("latex -interaction nonstopmode -output-directory %o %f")
              :image-converter
              ("dvisvgm %f -n -b min -c %S -o %O"))
     (imagemagick :programs
                  ("latex" "convert")
                  :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :image-input-type "pdf" :image-output-type "png" :image-size-adjust
                  (1.0 . 1.0)
                  :latex-compiler
                  ("pdflatex -interaction nonstopmode -output-directory %o %f")
                  :image-converter
                  ("convert -density %D -trim -antialias %f -quality 100 %O"))))
  )
#+end_src

** Babel
**** =ob-async=
#+name: org--ob-async
#+begin_src emacs-lisp 
;; NOTE: Attempt at fixing issue with `ob-async'.
;; Source: https://github.com/astahlman/ob-async/issues/75#issuecomment-766783255
(use-package ob-async
  ;; :straight (:type git :host github :repo "astahlman/ob-async")
  ;; Handling of errors: https://github.com/astahlman/ob-async/issues/75#issuecomment-766783255
  ;; + some of my changes.
  :straight (:type git :host github :repo "torfjelde/ob-async" :branch "tor/develop")
  :config
  ;; NOTE: Fixes issue when interacting with `jupyter'.
  ;; https://github.com/nnicandro/emacs-jupyter/issues/383#issuecomment-1020919685
  (setq ob-async-no-async-languages-alist '("python" "julia" "jupyter-python" "jupyter-julia")))
#+end_src

*** =ob-julia=
#+name: org--ob-julia
#+begin_src emacs-lisp 
;; HACK: Need to load this here to ensure that we don't end up installing `org' (which is likely
;; to be a dependency of `ob-*' babel) using the wrong recipe.
;; TODO: Shoud we just load this after `org', and then call `org-babel-do-load-languages' in
;; that `use-package' block instead?
(use-package ob-julia
  :after org
  :straight (:type git :host github :repo "torfjelde/ob-julia" :branch "master")
  ;; :hook (org-mode . (lambda () (require 'ob-julia)))
  :config
  ;; Delete the current element in `org-src-lang-modes', if exists.
  (setq org-src-lang-modes (delq (assoc "julia" org-src-lang-modes) org-src-lang-modes))
  ;; Add `julia-ts` as the current mode to use.
  (add-to-list 'org-src-lang-modes '("julia" . julia-ts))

  (org-babel-do-load-languages
     'org-babel-load-languages
     (append org-babel-load-languages '((julia . t)))))
#+end_src

*** =ob-chatgpt=
#+name: org--ob-chatgpt
#+begin_src emacs-lisp 
(use-package ob-chatgpt
  :after (org chatgpt)
  :straight (:host github :repo "suonlight/ob-chatgpt" :files ("dist" "*.el"))
  :config
  ;; Load it.
  (org-babel-do-load-languages 'org-babel-load-languages (append org-babel-load-languages '((chatgpt . t))))

  ;; We'll use markdown formatting, because:
  ;; a) With `polymode' we get the correct fontification in the block in the org buffer.
  ;; b) We cann tell ChatGPT to use \(...\) and $$...$$ for mats, which is also valid in org,
  ;;    i.e. we can just do `org-preview-latex-fragment' to see the rendered math.

  ;; Wrap the result in markdown instead.
  (setq org-babel-default-header-args:chatgpt '((:wrap . "markdown")))
  ;; Delete the current element in `org-src-lang-modes'.
  (setq org-src-lang-modes (delq (assoc "chatgpt" org-src-lang-modes) org-src-lang-modes))
  ;; Add it back with the new value.
  (add-to-list 'org-src-lang-modes '("chatgpt" . markdown)))
#+end_src

** Exports

*** =org-reveal=
#+name: org--ox-reveal
#+begin_src emacs-lisp
(use-package ox-reveal
  ;; NOTE: Necessary because otherwise we end up trying to load `org-reveal'
  ;; which is actually not provided (despite the name of the project).
  :straight (ox-reveal :host github :repo "torfjelde/org-reveal" :branch "torfjelde/develop")
  :custom
  (org-reveal-extract-mathjax-version-from-url t)
  (org-reveal-mathjax3-version "3.2.2")
  (org-reveal-mathjax3-config
   (json-encode
    '((loader (load . ["[tex]/physics" "[tex]/color"]))
      (tex
       (inlineMath ["$" "$"] ["\\(" "\\)"])
       (packages ("[+]" . ["physics" "color"]))
       (macros (ind . "\\unicode{x1D7D9}"))
       ))))
  (org-reveal-plugin-to-name '((chalkboard . RevealChalkboard)))
  (org-reveal-external-plugins '((RevealChalkboard . ("%splugin/chalkboard/plugin.js" "%splugin/chalkboard/style.css"))))
  )
#+end_src

*** =by-backend=: allow backend-specific headers in exports
#+name: org--by-backend
#+begin_src emacs-lisp 
(defmacro by-backend (&rest body)
  "Evaluate BODY for the given backends.
This uses `cl-case' to pick out the correct body for the current
backend, i.e. each element in BODY needs to be of the form
`(BACKEND BODY)'.

An example of using this to specify, say, whether a src-block
in Org-mode should be exported or not depending on the backend:

,#+begin_src emacs-lisp :exports (by-backend (html \"both\") (t \"none\"))
(+ 1 2)
,#+end_src

This will then export both code and result if the backend is HTML,
and nothing for all other backends."
  `(progn
     (cl-case org-export-current-backend ,@body)))
#+end_src

** Navigation

*** =org-sidebar.el=
#+name: org--org-sidebar
#+begin_src emacs-lisp
(use-package org-sidebar
  :custom (org-sidebar-tree-jump-fn 'org-sidebar-tree-jump-source))
#+end_src

** Other stuff
*** Proper handling of ANSI color codes
#+name: org--ansi-color-codes-handling
#+begin_src emacs-lisp 
;; Source: https://emacs.stackexchange.com/a/63562
(defun ek/babel-ansi ()
  "Properly handle ANSI color codes in the result for a SRC block."
  ;; FIXME(torfjelde): I don't think this works if the result is a single line,
  ;; i.e. NOT wrapped in a `#+begin_example'.
  (when-let ((beg (org-babel-where-is-src-block-result nil nil)))
    (save-excursion
      (goto-char beg)
      (when (looking-at org-babel-result-regexp)
        (let ((end (org-babel-result-end))
              (ansi-color-context-region nil))
          (ansi-color-apply-on-region beg end))))))

(add-hook 'org-babel-after-execute-hook 'ek/babel-ansi)
#+end_src

*** =org-download=
This package makes it trivial to paste and drag-and-drop images into a Org buffer.

#+name: org--org-download
#+begin_src emacs-lisp 
(use-package org-download
  :custom
  (org-download-heading-lvl nil "Don't use the sub-headings for the folder names")
  (org-download-image-org-width 600)
  (org-download-display-inline-images nil "Don't display inline images after download")
  :config (progn
            ;; HACK: overload this method so we fall back to using "./.filename/assets/" for the downloaded stuff
            (defun org-download--dir-1 ()
              (or org-download-image-dir (concat (file-name-as-directory ".") "." (file-name-base) "/attachments")))))
#+end_src

*** TODO =org-ref=
*** =org-contrib=
#+name: org--contrib
#+begin_src emacs-lisp
(use-package org-contrib
  :config
  (require 'ox-extra)
  ;; Usage of `:ignore' tag on a headline means that this headline will be ignored
  ;; upon export, _but_ its children will still be exported.
  (ox-extras-activate '(ignore-headlines))
  )
#+end_src

*** =org-present=
#+name: org--org-present
#+begin_src emacs-lisp 
;; `org-present'
(use-package org-present
  :after org
  :ensure t
  :config
  
  (defun my/org-present-prepare-slide (buffer-name heading)
    ;; Show only top-level headlines
    (org-overview)

    ;; Unfold the current entry
    (org-show-entry)

    ;; Show only direct subheadings of the slide but don't expand them
    (org-show-children))

  (defun my/org-present-start ()
    ;; Usually going to use `org-present-big' so we store the current settings and update.
    (setq-local org-present--org-format-latex-options org-format-latex-options)
    (setq-local org-format-latex-options '(:foreground default
                                                       :background default
                                                       :scale 3.0
                                                       :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))

    ;; Since the latex generated will be quite a different size, we use
    ;; a different output folder.
    (setq-local org-present--org-preview-latex-image-directory org-preview-latex-image-directory)
    (setq-local org-preview-latex-image-directory "~/.ltximg-present/")

    ;; Set a blank header line string to create blank space at the top
    (setq header-line-format " ")

    ;; Display inline images automatically
    (org-display-inline-images)

    ;; Center the presentation and wrap lines
    (visual-line-mode 1))

  (defun my/org-present-end ()
    ;; (setq-local face-remapping-alist '((default default)))

    ;; Reset the latex preview stuff.
    (setq-local org-format-latex-options org-present--org-format-latex-options)
    (setq-local org-preview-latex-image-directory org-present--org-preview-latex-image-directory)
    
    ;; Clear the header line string so that it isn't displayed
    (setq header-line-format nil)

    ;; Stop displaying inline images
    (org-remove-inline-images)

    ;; Stop centering the document
    (visual-line-mode 0))
  
  ;; Register hooks with org-present
  (add-hook 'org-present-mode-hook #'my/org-present-start)
  (add-hook 'org-present-mode-quit-hook #'my/org-present-end)
  (add-hook 'org-present-after-navigate-functions #'my/org-present-prepare-slide))
#+end_src

*** =org-noter=
#+name: org--org-noter
#+begin_src emacs-lisp 
(use-package org-noter
  :straight (:type git :host github :repo "torfjelde/org-noter" :branch "torfjelde/develop")
  :custom
  ;; Don't hide the other sections when we scroll to a new page.
  (org-noter-hide-other nil)

  (org-noter-doc-property-in-notes t)

  (org-noter-notes-search-path '("~/org-blog/papers/"))
  (org-noter-default-notes-file-names '("notes.org"))
  ;; NOTE: stuff I've introduced myself.
  (org-noter-one-file-per-doc t)
  (org-noter-default-file-header "#+SETUPFILE: ../setup-level-1.org")
  )
#+end_src

*** Anki
#+name: org--anki-editor
#+begin_src emacs-lisp 
(use-package anki-editor
  ;; Fork of `anki-editor.el' that seems to be working with the most recent version of AnkiConnect.
  :straight (:type git :host github :repo "orgtre/anki-editor")
  :hook
  (org-capture-mode . (lambda ()
                        (when (string-equal (buffer-name) "CAPTURE-anki.org")
                          (save-restriction
                            (message "setting tags")
                            (with-current-buffer "anki.org"
                              (setq-local org-tag-alist (-map (lambda (el) (cons el nil)) (anki-editor-all-tags))))
                            ))
                        ))
  :init 
  (setq anki-editor-break-consecutive-braces-in-latex t))
#+end_src

** Personal customization
*** Make =C-c C-v C-n= and =C-c C-v C-p= handle inline CALL
#+name: org--custom--to-src-block-or-inline-call
#+begin_src emacs-lisp
;; Replicate `org-previous-src-block' with including matching inline calls.
(defvar my/org-babel-inline-call-regexp "call_\\S-\\|^[ \t]*#\\+CALL:"
  "Regexp matching inline calls.")

(defun my/join-regexps-or (regexp1 regexp2)
  "Join two regexps in an OR match."
  (concat "\\(" regexp1 "\\)\\|\\(" regexp2 "\\)"))

(defun org-next-src-block-or-inline-call (&optional arg)
  "Jump to the next source block or inline call."
  (interactive "p")
  (org-next-block arg nil (my/join-regexps-or org-babel-src-block-regexp my/org-babel-inline-call-regexp)))

(defun org-previous-src-block-or-inline-call (&optional arg)
  "Jump to the previous source block or inline call."
  (interactive "p")
  (org-previous-block arg (my/join-regexps-or org-babel-src-block-regexp my/org-babel-inline-call-regexp)))

;; Override.
(defun org-next-block (arg &optional backward block-regexp)
  "Jump to the next block.
With a prefix argument ARG, jump forward ARG many blocks.
When BACKWARD is non-nil, jump to the previous block.
When BLOCK-REGEXP is non-nil, use this regexp to find blocks.
Match data is set according to this regexp when the function
returns.
Return point at beginning of the opening line of found block.
Throw an error if no block is found."
  (interactive "p")
  (let ((re (or block-regexp "^[ \t]*#\\+BEGIN"))
	    (case-fold-search t)
	    (search-fn (if backward #'re-search-backward #'re-search-forward))
	    (count (or arg 1))
	    (origin (point))
	    last-element)
    (if backward (beginning-of-line) (end-of-line))
    (while (and (> count 0) (funcall search-fn re nil t))
      (let ((element (save-excursion
		               (goto-char (match-beginning 0))
		               (save-match-data (org-element-at-point)))))
	    (when (and (memq (org-element-type element)
			             '(center-block comment-block dynamic-block
					                    example-block export-block quote-block
					                    special-block src-block verse-block
                                        ;; NOTE: This is the only change. We've just added `babel-call' and `inline-babel-call'.
                                        babel-call inline-babel-call))
		           (<= (match-beginning 0)
		               (org-element-property :post-affiliated element)))
	      (setq last-element element)
	      (cl-decf count))))
    (if (= count 0)
	    (prog1 (goto-char (org-element-property :post-affiliated last-element))
	      (save-match-data (org-show-context)))
      (goto-char origin)
      (user-error "No %s code blocks" (if backward "previous" "further")))))

;; Bind `C-c C-v C-p' to `org-previous-src-block-or-inline-call'.
(define-key org-mode-map (kbd "C-c C-v C-p") 'org-previous-src-block-or-inline-call)
;; Bind `C-c C-v C-n' to `org-next-src-block-or-inline-call'.
(define-key org-mode-map (kbd "C-c C-v C-n") 'org-next-src-block-or-inline-call)
#+end_src

*** Display inline images in subtree only
#+name: org--custom--display-inline-images-subtree
#+begin_src emacs-lisp 
;; Call `org-display-inline-images' on the current subtree.
(defun org-display-inline-images-in-subtree ()
  "Display inline images in the current subtree."
  (interactive)
  (let ((current-num-inline-images (length org-inline-image-overlays))
        (start (save-excursion (org-back-to-heading) (point)))
        (end (save-excursion (org-end-of-subtree) (point))))
    (org-display-inline-images nil t start end)
    (when (called-interactively-p 'interactive)
      (message "Displayed %d inline images"
               (- (length org-inline-image-overlays) current-num-inline-images)))))
#+end_src

*** Command for inserting src block below
#+name: org--custom--insert-src-block-below
#+begin_src emacs-lisp 
(defun my/org-babel-insert-block-below (&optional arg)
  "Insert a new source block below the current one.

If the current source block has results, insert the new block
below the results."
  (interactive "P")
  (let* ((info (org-babel-get-src-block-info 'light))
	     (start (org-babel-where-is-src-block-head))
	     (block (and start (match-string 0)))
	     (headers (and start (match-string 4)))
	     (stars (concat (make-string (or (org-current-level) 1) ?*) " "))
	     (lower-case-p (and block
			                (let (case-fold-search)
			                  (string-match-p "#\\+begin_src" block)))))
    ;; Check that `info' is non-nil.
    (unless info
      (user-error "Not in a source block"))

    ;; 1. Check if the src-block has results. If it does, skip that block too.
    (if (org-babel-where-is-src-block-result)
        (progn
          (goto-char (org-babel-where-is-src-block-result))
          ;; If the beginning of the src block result is the same as the end of the
          ;; result, we skip until we find an empty line.
          ;; This can happen in the case where, for example, a src block produces a file
          ;; output or something.
          ;; Otherwise, we just skip to the end of the result.
          (if (eq (point) (org-babel-result-end))
              (re-search-forward "\n[ \t]*\n")
            (goto-char (org-babel-result-end))))
      ;; Otherwise, we just need to go to the end of the block.
      (goto-char (org-element-property :end (org-element-at-point))))

    ;; 2. Insert a new line.
    (insert "\n")

    ;; 3. Insert the new src block.
    (insert (concat
             (if (looking-at "^") "" "\n")
             (if arg stars "")
             (funcall (if lower-case-p 'downcase 'upcase) "#+begin_src ")
             (nth 0 info)
             (if (> (length headers) 1)
                 (concat " " headers)
               "")
             ;; One newline for the end of the src block to be inserted.
             ;; And one newline so we have an empty line to insert the point at.
             "\n"
             "\n"
             (if arg stars "")
             (funcall (if lower-case-p 'downcase 'upcase) "#+end_src\n")))
    ;; 4. Move the point to the first empty line in the src block.
    (forward-line -2)))
#+end_src

*** Make =#+INCLUDE: ...= useful outside of exports
#+name: org--custom--include-include
#+begin_src emacs-lisp 
;; The following provides us with a convenient way of converting a region to an
;; org include statement.
(defun my/mode-to-src-block-lang-string (mode)
  "Convert a mode symbol to a src block language string."
  (cond
   ((eq mode 'fundamental-mode) "")
   (t (concat "src " (string-replace "-mode" "" (symbol-name mode))))))
  

(defun org-region-to-include-keyword ()
  "Convert the current region into an #+INCLUDE keyword and add to kill ring.

If the region is not active, use the current line."
  (interactive)
  (let ((beg-line (if (region-active-p) (line-number-at-pos (region-beginning)) (line-number-at-pos)))
        (end-line (if (region-active-p) (line-number-at-pos (region-end)) (line-number-at-pos)))
        (file (buffer-file-name (buffer-base-buffer))))
    (when (not file)
      (user-error "Buffer is not visiting a file"))
    (let ((result (format "#+INCLUDE: \"%s\" :lines \"%d-%d\" %s"
                          file
                          beg-line
                          (+ end-line 1) ;; We want to include the last line.
                          (my/mode-to-src-block-lang-string major-mode))))
      (message "Copied to kill ring: %s" result)
      (kill-new result))))

;; TODO: Make it possible to add a `:include-source' keyword which, if `non-nil',
;; makes it so that the source is inserted as a comment at the beginning of the
;; included file.

;; TODO: Either make use of the arguments or just remove them.
(defun org-export-expand-include-keyword-at-point (&optional included dir footnotes)
  "Expand the INCLUDE keyword at point."
  (interactive "P")
  (let ((includer-file (buffer-file-name (buffer-base-buffer)))
	    (case-fold-search t)
	    (file-prefix (make-hash-table :test #'equal))
	    (current-prefix 0)
	    (footnotes (or footnotes (make-hash-table :test #'equal)))
	    (include-re "^[ \t]*#\\+INCLUDE:")
        (element (org-element-at-point)))
    (when (eq (org-element-type element) 'keyword)
      (beginning-of-line)
      ;; Extract arguments from keyword's value.
      (let* ((value (org-element-property :value element))
		     (ind (current-indentation))
		     location
		     (coding-system-for-read
		      (or (and (string-match ":coding +\\(\\S-+\\)>" value)
			           (prog1 (intern (match-string 1 value))
			             (setq value (replace-match "" nil nil value))))
			      coding-system-for-read))
		     (file
		      (and (string-match "^\\(\".+?\"\\|\\S-+\\)\\(?:\\s-+\\|$\\)"
				                 value)
			       (prog1
			           (save-match-data
			             (let ((matched (match-string 1 value)))
				           (when (string-match "\\(::\\(.*?\\)\\)\"?\\'"
						                       matched)
				             (setq location (match-string 2 matched))
				             (setq matched
					               (replace-match "" nil nil matched 1)))
				           (expand-file-name (org-strip-quotes matched)
						                     dir)))
			         (setq value (replace-match "" nil nil value)))))
		     (only-contents
		      (and (string-match ":only-contents *\\([^: \r\t\n]\\S-*\\)?"
				                 value)
			       (prog1 (org-not-nil (match-string 1 value))
			         (setq value (replace-match "" nil nil value)))))
		     (lines
		      (and (string-match
			        ":lines +\"\\([0-9]*-[0-9]*\\)\""
			        value)
			       (prog1 (match-string 1 value)
			         (setq value (replace-match "" nil nil value)))))
		     (env (cond
			       ((string-match "\\<example\\>" value) 'literal)
			       ((string-match "\\<export\\(?: +\\(.*\\)\\)?" value)
			        'literal)
			       ((string-match "\\<src\\(?: +\\(.*\\)\\)?" value)
			        'literal)))
		     ;; Minimal level of included file defaults to the
		     ;; child level of the current headline, if any, or
		     ;; one.  It only applies is the file is meant to be
		     ;; included as an Org one.
		     (minlevel
		      (and (not env)
			       (if (string-match ":minlevel +\\([0-9]+\\)" value)
			           (prog1 (string-to-number (match-string 1 value))
			             (setq value (replace-match "" nil nil value)))
			         (get-text-property (point)
					                    :org-include-induced-level))))
		     (args (and (eq env 'literal) (match-string 1 value)))
		     (block (and (string-match "\\<\\(\\S-+\\)\\>" value)
			             (match-string 1 value))))
	    ;; Remove keyword.
	    (delete-region (point) (line-beginning-position 2))
	    (cond
	     ((not file) nil)
	     ((not (file-readable-p file))
	      (error "Cannot include file %s" file))
	     ;; Check if files has already been parsed.  Look after
	     ;; inclusion lines too, as different parts of the same
	     ;; file can be included too.
	     ((member (list file lines) included)
	      (error "Recursive file inclusion: %s" file))
	     (t
	      (cond
	       ((eq env 'literal)
		    (insert
		     (let ((ind-str (make-string ind ?\s))
			       (arg-str (if (stringp args) (format " %s" args) ""))
			       (contents
			        (org-escape-code-in-string
			         (org-export--prepare-file-contents file lines))))
		       (format "%s#+BEGIN_%s%s\n%s%s#+END_%s\n"
			           ind-str block arg-str contents ind-str block))))
	       ((stringp block)
		    (insert
		     (let ((ind-str (make-string ind ?\s))
			       (contents
			        (org-export--prepare-file-contents file lines)))
		       (format "%s#+BEGIN_%s\n%s%s#+END_%s\n"
			           ind-str block contents ind-str block))))
	       (t
		    (insert
		     (with-temp-buffer
		       (let ((org-inhibit-startup t)
			         (lines
			          (if location
				          (org-export--inclusion-absolute-lines
				           file location only-contents lines)
			            lines)))
		         (org-mode)
		         (insert
			      (org-export--prepare-file-contents
			       file lines ind minlevel
			       (or (gethash file file-prefix)
			           (puthash file
				                (cl-incf current-prefix)
				                file-prefix))
			       footnotes
			       includer-file)))
		       (org-export-expand-include-keyword
		        (cons (list file lines) included)
		        (file-name-directory file)
		        footnotes)
		       (buffer-string)))))
	      ;; Expand footnotes after all files have been
	      ;; included.  Footnotes are stored at end of buffer.
	      (unless included
		    (org-with-wide-buffer
		     (goto-char (point-max))
		     (maphash (lambda (k v)
			            (insert (format "\n[fn:%s] %s\n" k v)))
			          footnotes)))))))))
#+end_src

*** Result
#+name: org--custom
#+begin_src emacs-lisp
<<org--custom--to-src-block-or-inline-call>>
<<org--custom--display-inline-images-subtree>>
<<org--custom--insert-src-block-below>>
<<org--custom--include-include>>
#+end_src

** Result
#+name: org
#+begin_src emacs-lisp
<<org--tors-reading-list>>
<<org--agenda-utilities>>
<<org--main>>

<<org--ob-async>>
<<org--ob-julia>>
<<org--ob-chatgpt>>

<<org--ox-reveal>>
<<org--by-backend>>

<<org--org-sidebar>>

<<org--ansi-color-codes-handling>>
<<org--org-download>>
<<org--contrib>>
<<org--org-present>>
<<org--org-noter>>

<<org--custom>>
#+end_src
* Citations
#+name: citations
#+begin_src emacs-lisp 
;; Citations.
(defun my/citar-file--parser (file-field)
  "Return a list of files from DIRS and a FILE-FIELD formatted as a triplet.

This is file-field format seen in, for example, Calibre and Mendeley.

Example: ':/path/to/test.pdf:PDF'."
  (let (filenames)
    (dolist (sepchar '(?\; ))         ; Mendeley and Zotero use ;, Calibre uses ,
      (dolist (substring (citar-file--split-escaped-string file-field sepchar))
        (let* ((pair (citar-file--split-escaped-string substring ?:))
               (len (length pair)))
          (when (>= len 2)
            ;; If there are more than three components, we probably split on unescaped : in the filename.
            ;; Take all but the first and last components of TRIPLET and join them with :
            (let* ((escaped (string-join (butlast pair) ":"))
                   (filename (replace-regexp-in-string "\\\\\\(.\\)" "\\1" escaped)))
              ;; Calibre doesn't escape file names in BIB files, so try both
              ;; See https://github.com/kovidgoyal/calibre/blob/master/src/calibre/library/catalogs/bibtex.py
              (push filename filenames)
              (push escaped filenames))))))
    (nreverse filenames)))

(use-package citar
  :custom
  (citar-bibliography '("~/Dropbox/bibliography/references.bib"))
  (citar-library-paths '("~/Dropbox/bibliography/pdfs/"))
  ;; FIXME: For some reason this doesn't work; it then complains that
  ;; it's not actually a list of functions. Instead we have to set it in `custom.el`.
  ;; (citar-file-parser-functions (my/citar--file-parser))
  :bind
  ("C-c ]" . citar-open)
  :hook
  (LaTeX-mode . citar-capf-setup)
  (org-mode . citar-capf-setup))

(use-package citar-embark
  :delight citar-embark-mode
  :after citar embark
  :no-require
  :config (citar-embark-mode))
#+end_src
* Email
** Aim
There are two needs:
1. Retrieving emails.
   - Which we'll solve using *internet message access protocol (IMAP)*.
2. Sending emails.
   - Which we'll solve using *simple mail transport protocol (SMTP)*.
3. An interface (in Emacs) that unifies the two.

** =~/.authinfo=
- Effectively a very simple plain-text password manager with encryption (if used right)
- Nicely supported in Emacs
  - Also comes with Python bindings (though py3 requires a bit of fiddling)

** Python 3
- Can be useful for other integrations, e.g. I'm already sending emails using Emacs so if I write a Python script, it's nice if I can also just use the auth-information already present in my =~/.authinfo=
- Requires building =authinfo= from scratch
  - Also requires a particular fork: https://github.com/torfjelde/authinfo
- A simple =make install= copies the python package into =/usr/local/lib/python3.8/site-packages= which, unfortunately, isn't loaded (unless you're running the global python interpreter, which is rare these days).
  - A simple fix: =mv= the above to =/usr/local/lib/python3.8/dist-packages= which is loaded by every python installation (this is consider the /global/ repository for packages)
- Possible error: missing shared library =libauthinfo.so.0=
  - The =libauthinfo.so.0= file /should/ be present in =/usr/local/lib= or something equivalent (look for =libauthinfo.so.0= in the output for of the =make install=).
  - So this can be fixed by making sure that Python is indeed looking for shared libraries there, f.ex. by running =export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH=.
- Also a useful resource if needed: https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources


** Retrieving emails using =offlineimap=

*** Integration with different providers

**** Outlook

***** =davmail=
- Effectively functions as a local email server, handling everything between you and Outlook, e.g. authentication.

#+begin_src shell :results output :wrap "src conf" :eval no
less ~/.offlineimaprc
#+end_src

#+RESULTS:
#+begin_src conf
[general]
accounts = account-1,account-2,account-3,account-4
maxsyncaccounts = 4
# Path to file with arbitrary Python code to load.
pythonfile = ~/.offlineimap.py

[Account account-2]
localrepository = account-2-local
remoterepository = account-2-exchange
# postsynchook = $HOME/.local/bin/check-email

[Repository account-2-local]
type = Maildir
localfolders = $HOME/mail/account-2@cam.ac.uk
# TODO: This is too aggressive.
nametrans = lambda folder: folder.replace('sent', 'Sent Items')

[Repository account-2-exchange]
type = IMAP
ssl = no
remotehost = localhost
remoteport = 1143
remoteuser = account-2@cam.ac.uk
remotepass = asdfas # it's not actually used
# createFolders = False # don't create folders remotely
# readonly = yes
# TODO: This is too aggressive.
nametrans = lambda folder: folder.replace('Sent Items', 'sent')
folderfilter = lambda folder: "Hermes" not in folder

[Account account-3]
localrepository = account-3-local
remoterepository = account-3-exchange
# postsynchook = $HOME/.local/bin/check-email

[Repository account-3-local]
type = Maildir
localfolders = $HOME/mail/account-3_coms@darwin.cam.ac.uk
# TODO: This is too aggressive.
nametrans = lambda folder: folder.replace('sent', 'Sent Items')

[Repository account-3-exchange]
type = IMAP
ssl = no
remotehost = localhost
remoteport = 1143
remoteuser = account-@cam.ac.uk/account-3_coms@darwin.cam.ac.uk
remotepass = asdfas # it's not actually used
# This is really stupid.
folderfilter = lambda folder: '/users/account-3_coms@darwin/cam/ac/uk/' not in folder
# createFolders = False # don't create folders remotely
# readonly = yes
# TODO: This is too aggressive.
nametrans = lambda folder: folder.replace('Sent Items', 'sent')

[Account account-1]
localrepository = account-1-local
remoterepository = account-1-remote
# postsynchook = $HOME/.local/bin/check-email

[Repository account-1-remote]
type = Gmail
remoteuser = account-1@gmail.com
remotepasseval = get_authinfo_password("smtp.gmail.com", "account-1@gmail.com", 587)
ssl = yes
sslcacertfile = OS-DEFAULT

[Repository account-1-local]
type = GmailMaildir
localfolders = $HOME/mail/account-1@gmail.com


[Account account-4]
localrepository = account-4-local
remoterepository = account-4-remote
# postsynchook = $HOME/.local/bin/check-email

[Repository account-4-remote]
type = Gmail
remoteuser = account-4@gmail.com
remotepasseval = get_authinfo_password("smtp.gmail.com", "account-4@gmail.com", 587)
ssl = yes
sslcacertfile = OS-DEFAULT

[Repository account-4-local]
type = GmailMaildir
localfolders = $HOME/mail/account-4@gmail.com
#+end_src

Note: the accounts in the above are anonymized so I can avoid a bit of spam, which is always nice.

****** Setup

**** TODO Gmail

*** Authentication
- Using =~/.authinfo= to store the passwords (this is also used by Emacs' SMTP functionality)
- Need some setup to make =offlineimap= work nicely with this.

#+begin_src python
#!/usr/bin/env python2
import re, os, sys


def get_authinfo_password(machine, login, port):
    "Extracts password from `~/.authinfo` for a given `machine`, `login`, `port` combination."
    s = "machine %s login %s port %s password (.*)$" % (machine, login, port)
    p = re.compile(s, flags=re.MULTILINE)
    # TODO: Use encrypted `.authinfo`.
    # authinfo = os.popen("gpg -q --no-tty -d ~/.authinfo.gpg").read()
    with open("/home/tor/.authinfo", "r") as f:
        authinfo = f.read()

    return p.search(authinfo).group(1)


if __name__ == "__main__":
    # Useful for testing.
    print(get_authinfo_password(sys.argv[1], sys.argv[2], sys.argv[3]))
#+end_src

And then we need to load this file in our =.offlineimaprc=:

#+begin_src shell :results output :wrap src conf :eval no :exports output
sed -n "1,5p" ~/.offlineimaprc
#+end_src

#+RESULTS:
#+begin_src conf
[general]
...
# Path to file with arbitrary Python code to load.
pythonfile = ~/.offlineimap.py
#+end_src

Now we can use the =remotepasseval= setting for the remote repositories to extract the auth info:

#+begin_src conf :eval no :exports code
# NOTE: Usually here we should be using `imap.gmail.com`, but we'll be needing the same auth info for SMTP so might as well just re-use
# rather than having multiple entries with the same info in the `~/.authinfo`.
remotepasseval = get_authinfo_password("smtp.gmail.com", "account-4@gmail.com", 587)
#+end_src

#+begin_warning
Some sources on the interwebs says to use =remotepass= in the above, but that doesn't seem to work. 
#+end_warning

** Interfacing with emails using =notmuch=
- Provides a simple and powerful tagging system
- Treats everything as a single big "inbox", allowing us to easily filter based on different tags.
  - Personally find this very useful due to all the different email accounts I manage.

** Setting up =cron= for periodic checking
#+begin_example
# Google won't be happy if we check the email too often, i.e. more frequently than ever 10 mins:
# https://support.google.com/mail/answer/7126229?visit_id=638005640878107785-764406290&p=BadCredentials&rd=2#cantsignin&zippy=%2Ci-cant-sign-in-to-my-email-client
*/10 *  * * *      offlineimap >> $HOME/.logs/offlineimap.log 2>&1
*/1  *  * * *      DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus bash -lc check-email >> ~/.logs/check-mail.log 2>&1
#+end_example

This assumes that the script =check-email= is available in your =PATH=.
There are a couple of things to note here:
- =bash -lc= where
  - =l= is to "Make bash act as if it had been invoked as a login shell", e.g. it will load =~/.profile= and so on.
    - This is mucho importante if you want 
- From https://askubuntu.com/a/1274272: we need the weird stuff before the comand to make sure the =notify-send= works.


** Writing messages
When writing a message, we're in, well =message-mode=. So that's where you should look if you want to change how things are handled.

*** Disabling automatic line-break
I find the automatic breaking of lines a bit annoying, in particular in this day and age when most email clients I send to will have some automatic formatting when viewed.

This can be "disabled"/controlled by setting the value of =message-fill-column= to whatever you desire, e.g. =999999=.

*** Signature
**** Old me
This is handled by =message-signature=, but the generally best approach is probably just to have a =~/.signature= file, which is automatically detected.

For example:

#+begin_example
All the best,
Tor
#+end_example

One annoying thing is that the signature-seperator is /hard-coded/ (I know, crazy) to be "--":

#+begin_src emacs-lisp :eval no
(defun message-insert-signature (&optional force)
  "Insert a signature.  See documentation for variable `message-signature'."
  (interactive (list 0))
  (let ((message-signature message-signature)
	(message-signature-file message-signature-file))
    ;; If called interactively and there's no signature to insert,
    ;; consult the global values to see whether there's anything they
    ;; have to say for themselves.  This can happen when using
    ;; `gnus-posting-styles', for instance.
    (when (and (null message-signature)
	       (null message-signature-file)
	       (eq force 0))
      (setq message-signature (default-value 'message-signature)
	    message-signature-file (default-value 'message-signature-file)))
    (let* ((signature
	    (cond
	     ((and (null message-signature)
		   (eq force 0))
	      (save-excursion
		(goto-char (point-max))
		(not (re-search-backward message-signature-separator nil t))))
	     ((and (null message-signature)
		   force)
	      t)
	     ((functionp message-signature)
	      (funcall message-signature))
	     ((listp message-signature)
	      (eval message-signature))
	     (t message-signature)))
	   signature-file)
      (setq signature
	    (cond ((stringp signature)
		   signature)
		  ((and (eq t signature) message-signature-file)
		   (setq signature-file
			 (if (and message-signature-directory
				  ;; don't actually use the signature directory
				  ;; if message-signature-file contains a path.
				  (not (file-name-directory
					message-signature-file)))
			     (expand-file-name message-signature-file
					       message-signature-directory)
			   message-signature-file))
		   (file-exists-p signature-file))))
      (when signature
	(goto-char (point-max))
	;; Insert the signature.
	(unless (bolp)
	  (newline))
	(when message-signature-insert-empty-line
	  (newline))
	(insert "-- ")  ;; FIXME: THIS GUY!
	(newline)
	(if (eq signature t)
	    (insert-file-contents signature-file)
	  (insert signature))
	(goto-char (point-max))
	(or (bolp) (newline))))))
#+end_src

#+RESULTS:

It's not the worst thing in the world though I guess.
**** [2023-05-23 Tue 12:20] Solution
Just define your own function for inserting the signature and use this, e.g.

#+begin_src emacs-lisp :eval no
(defun my/message-signature ()
  "Insert a signature."
  ;; We want to insert the signature ABOVE the quoted text,
  ;; so we first to go the message body.
  ;; NOTE: This insertion happens prior to inserting the quoted text.
  (message-goto-body)
  (insert "\n\n")
  (insert "All the best,\n")
  (insert "Tor\n"))

(setq message-signature 'my/message-signature)
#+end_src

** Resulting config
#+name: mail
#+begin_src emacs-lisp 
;; Email
;; Useful resources:
;; - https://kkatsuyuki.github.io/notmuch-conf/
;; - https://chrisdone.com/posts/emacs-mail/
;; - Multiple email setup:
;; - https://www.djcbsoftware.nl/code/mu/mu4e/Example-configurations.html#Example-configurations
;;   Example configurations using =mu=, but also invovles some setting of general mail variables
;;   and examples with `offlineimap'.
;; - https://emacs.stackexchange.com/a/12932
;;   Example using `smptmail-multi', which is _very_ useful.
;; - https://protesilaos.com/codelog/2021-05-15-emacs-notmuch/
;;   Demo of `notmuch'.
;; - https://sqrtminusone.xyz/posts/2021-02-27-gmail/
;;   Different approach to syncing with gmail using `lieer'. This also allows syncing tags with gmail.

(setq mail-user-agent 'message-user-agent)

;; Formatting in message-mode.
(setq message-fill-column 999999)

;; The quoted text is always below.
(setq message-cite-reply-position 'above)

;; Signature insertion.
(defun my/message-signature ()
  "Insert a signature."
  ;; We want to insert the signature ABOVE the quoted text,
  ;; so we first to go the message body.
  ;; NOTE: This insertion happens prior to inserting the quoted text.
  (message-goto-body)
  (insert "\n\n")
  (insert "All the best,\n")
  (insert "Tor\n"))

(setq message-signature 'my/message-signature)

;; Replies
(setq message-citation-line-function 'message-insert-formatted-citation-line)
(setq message-citation-line-format "\n\nOn %a, %d/%m/%Y, %f wrote:\n")

(use-package smtpmail-multi
  :ensure t)

;; Load the list of email accounts.
(load (expand-file-name "~/Dropbox/dotfiles/.emacs/emails.el"))

(require 'dash)

(setq my/email-backend-configs
      '((gmail . (
                  ;; `smtpmail-smtp-server'
                  "smtp.gmail.com"
                  ;; `smtpmail-smtp-service'
                  587
                  ;; `mail-specify-envelope-from' will be set to `t', and `mail-envelope-from' will be set to the value
                  header
                  ;; `smptmail-stream-type'
                  starttls
                  ;; STARTTLS key (used to set `smptmail-starttls-credentials')
                  nil ;; TODO: is this correct?
                  ;; STARTTLS certificate (used to set `smtpmail-startttls-credentials')
                  nil ;; TODO: is this correct?
                  ;; `smtpmail-local-domain'
                  nil
                  ))
        (outlook . ("localhost" 1025 header nil))))

(defun my/make-smtpmail-multi-accounts-alist (accounts)
  "Make an alist of the form (NAME . (EMAIL BACKEND-CONFIG)) from ACCOUNTS."
  (-map
   (lambda (account)
     ;; Concatenate the email and the backend config, and then make a alist with the name as the key.
     (let ((email (plist-get account :email))
           (backend (plist-get account :backend)))
       `(,(plist-get account :name) . ,(cons email (alist-get backend my/email-backend-configs)))))
   accounts))

;; Define the different accounts and their corresponding settings.
(setq smtpmail-multi-accounts (my/make-smtpmail-multi-accounts-alist my/email-accounts))
;; Specify association rules for the different accounts.
(setq smtpmail-multi-associations (-map (lambda (x) (list (plist-get x :email) (plist-get x :name))) my/email-accounts))

;; Make the send mail function use `smtpmail-multi-send-it'.
(setq message-send-mail-function 'smtpmail-multi-send-it)
;; Useful for debugging purposes.
(setq smtpmail-debug-info t)

;; Allow usage of org-mode to compose emails.
(use-package org-mime)
(setq org-mime-library 'mml)

;; `notmuch' and related.
;; Docs: https://notmuchmail.org/doc/latest/notmuch-emacs.html
(use-package notmuch
  :custom
  (notmuch-always-prompt-for-sender t)  ;; promt for sender since I have multiple accounts
  (notmuch-search-oldest-first nil)     ;; sort by newest
  (notmuch-saved-searches my/notmuch-saved-searches)
  )

;; Adds nice integration with `org-mode', e.g. storing of links.
(use-package ol-notmuch
  :ensure t)

;; Usually have to have point at the HTML to show it,
;; which is a bit annoying.
(defun notmuch-show-view-html+ ()
  "Open the text/html part of the current message using
`notmuch-show-view-part'."
  (interactive)
  (save-excursion
    (goto-char
     (prop-match-beginning
      (text-property-search-forward
       :notmuch-part
       "text/html"
       (lambda (value notmuch-part)
         (equal (plist-get notmuch-part :content-type)
                value)))))
    (notmuch-show-view-part)))

;; Custom HTML renderer for email which simply converts into the source.
;; Adapted version of `mm-shr'.
;; FIXME: When activating the `web-mode', we end up disabling the `notmuch' keybindings.
(defun my/mm-raw-html (handle)
  (let (charset coding char document)
    (mm-with-part (or handle (setq handle (mm-dissect-buffer t)))
      ;; Identify encoding.
      (setq case-fold-search t)
      (or (setq charset
		        (mail-content-type-get (mm-handle-type handle) 'charset))
	      (progn
	        (goto-char (point-min))
	        (and (re-search-forward "\
<meta\\s-+http-equiv=[\"']?content-type[\"']?\\s-+content=[\"']?\
text/html;\\s-*charset=\\([^\t\n\r \"'>]+\\)[^>]*>" nil t)
		         (setq coding (mm-charset-to-coding-system (match-string 1)
							                               nil t))))
	      (setq charset mail-parse-charset))
      ;; Decode and insert contents if it's not ASCII.
      (when (and (or coding
		             (setq coding (mm-charset-to-coding-system charset nil t)))
		         (not (eq coding 'ascii)))
	    (insert (prog1
		            (decode-coding-string (buffer-string) coding)
		          (erase-buffer)
		          (set-buffer-multibyte t))))
      ;; Go back to start of the buffer.
      (goto-char (point-min))
      (while (re-search-forward
	          "&#\\(?:x\\([89][0-9a-f]\\)\\|\\(1[2-5][0-9]\\)\\);" nil t)
	    (when (setq char
		            (cdr (assq (if (match-beginning 1)
				                   (string-to-number (match-string 1) 16)
				                 (string-to-number (match-string 2)))
			                   mm-extra-numeric-entities)))
	      (replace-match (char-to-string char))))
      ;; Remove "soft hyphens".
      (goto-char (point-min))
      (while (search-forward "­" nil t)
	    (replace-match "" t t))
      ;; Set the `document' variable to the raw buffer contents.
      (setq document (buffer-string))
      )
    ;; Display.
    (save-restriction
      (narrow-to-region (point) (point))
      ;; Insert the HTML contents.
      (insert document)
      ;; Activate HTML mode.
      (web-mode)
      ;; Fontify so we get syntax highlighting and stuff.
      (font-lock-fontify-buffer)
      ;; Indent the buffer.
      (save-excursion
        (indent-region (point-min) (point-max) nil))
      ;; If we're at the beginning of the buffer, i.e. it's empty,
      ;; insert a newline.
      (unless (bobp)
	    (insert "\n"))
      (mm-handle-set-undisplayer
       handle
       (let ((min (point-min-marker))
             (max (point-max-marker)))
         (lambda ()
	       (let ((inhibit-read-only t))
	         (delete-region min max))))))))

;; (setq mm-text-html-renderer 'my/mm-raw-html)
(setq mm-text-html-renderer 'shr)

;; Handle attachments a bit better.
;; Source: https://notmuchmail.org/emacstips/#index2h2
(defun tor/mm-pipe-- (handle cmd)
  ;; conveniently, '-' '-' a args to pdftotext and docx2txt.pl work fine
  ;; fixme: naming inconsistency (fn name and buffer name)
  (let ((buffer (get-buffer-create "*attachment-to-text*")))
    (with-current-buffer buffer
      (setq buffer-read-only nil)
      (erase-buffer))
    (with-temp-buffer
      ;; "based on mm-pipe-part in mm-decode.el"
      (mm-with-unibyte-buffer
        (mm-insert-part handle)
        (mm-add-meta-html-tag handle)
        (let ((coding-system-for-write 'binary))
          (call-process-region (point-min) (point-max)
                               cmd nil buffer nil "-" "-"))))
    (pop-to-buffer buffer)
    (goto-char (point-min))
    (text-mode)
    (visual-line-mode)
    (view-mode)))

(defun tor/notmuch-show-pop-attachment-to-buffer ()
  ;; "based on `notmuch-show-apply-to-current-part-handle'"
  (interactive)
  (let ((handle (notmuch-show-current-part-handle)))
    (unwind-protect
        (pcase (car (nth 1 handle))
          ("application/pdf"
           ;; Save and open.
           ;; FIXME: Fails if we decide not to save the file, e.g.
           ;; because it would override an existing one.
           (find-file (notmuch-show-save-part))
           ;; Alternative: convert to text and open that buffer instead.
           ;; (tor/mm-pipe-- handle "pdftotext")
           )
          ("image/png"
           ;; Save and open.
           (find-file (notmuch-show-save-part))
           )
          ("application/vnd.openxmlformats-officedocument.wordprocessingml.document"
           (tor/mm-pipe-- handle "docx2txt"))
          (_ (notmuch-show-save-part)))
      (kill-buffer (mm-handle-buffer handle)))))

(setq notmuch-show-part-button-default-action
      #'tor/notmuch-show-pop-attachment-to-buffer)

;; Overrides `org-notmuch-open' which apparently expects 2 arguments, while `org-mode'
;; (at least the one I've currently installed), expects 1 argument.
;; The 2nd argument in `org-notmuch-open' isn't used for anything anyways, so we might
;; as well just define one that ought to be compatible with either 1 or 2 args.
(defun org-notmuch-open (path &rest)
  "Follow a notmuch message link specified by PATH."
  (funcall org-notmuch-open-function path))
#+end_src

Note that in the above file I also load this =emails.el= file of mine.
I do this just to hide some details regarding my email accounts (mainly just to avoid spam); the format of the file is something like

#+begin_src emacs-lisp
;; Configs for the different email accounts.
(setq my/email-accounts '((:name account-1 :email "account-1@gmail.com" :backend gmail)
                          (:name account-2 :email "account-2@gmail.com" :backend gmail)
                          (:name account-3 :email "account-3@cam.ac.uk" :backend outlook)
                          (:name account-4 :email "acocunt-4@darwin.cam.ac.uk" :backend outlook)))

;; Saved notmuch searches.
(setq
 my/notmuch-saved-searches
 '((:name "inbox" :query "tag:inbox" :sort-order newest-first :key "i")
   (:name "unread" :query "tag:unread" :sort-order newest-first :key "u")
   (:name "flagged" :query "tag:flagged" :sort-order newest-first :key "f")
   (:name "all mail" :query "*" :sort-order newest-first :key "a")
   (:name "account-1" :query "tag:account1" :sort-order newest-first :key "t")
   (:name "account-2" :query "tag:account-2" :sort-order newest-first :key "o")
   (:name "account-3" :query "tag:account-3" :sort-order newest-first :key "d")
   (:name "account-4" :query "tag:account-4" :sort-order newest-first :key "g")))
#+end_src

* Themes
** =doom-themes.el=
#+name: themes--doom-themes
#+begin_src emacs-lisp 
(use-package doom-themes)

;; Adds red "alert" to modeline upon hitting `C-g` to interrupt a command, etc.
(doom-themes-visual-bell-config)
#+end_src
** =doom-modeline.el=
#+name: themes--doom-modeline
#+begin_src emacs-lisp 
(use-package doom-modeline
  :ensure t
  :custom
  (doom-modeline-height 15)
  (doom-modeline-bar-width 6)
  (doom-modeline-lsp t)
  (doom-modeline-github nil)
  (doom-modeline-mu4e nil)
  (doom-modeline-irc t)
  (doom-modeline-minor-modes t)
  (doom-modeline-persp-name nil)
  (doom-modeline-buffer-file-name-style 'truncate-except-project)
  (doom-modeline-major-mode-icon nil)
  :config
  (doom-modeline-mode t))
#+end_src

** Custom hooks
#+name: themes--custom-hooks
#+begin_src emacs-lisp 
(defun tor/enable-theme-after (theme)
  "Run after loading THEME."
  ;; Ensures that the midnight mode has the correct colors set.
  ;; TODO: Do we even want to do this now `pdf-tools' has inverted colors?
  (when (my/straight-installed-p 'pdf-tools)
    (setq pdf-view-midnight-colors `(,(face-attribute 'default :foreground) . ,(face-attribute 'default :background)))
    )

  ;; Change the directory for the latex preview fragments.
  ;; Otherwise, you run into issues where org-mode tries to render
  ;; cached versions of some latex which, because they were created in
  ;; a different theme, has the wrong colors.
  (setq org-preview-latex-image-directory (concat "~/.ltximg-" (symbol-name theme) "/"))
  )

(advice-add 'enable-theme :after #'tor/enable-theme-after)
#+end_src
** Result
#+name: themes
#+begin_src emacs-lisp
<<themes--doom-themes>>
<<themes--doom-modeline>>
<<themes--custom-hooks>>

;; Load desired theme.
(load-theme 'doom-moonlight t)
(enable-theme 'doom-moonlight)  ;; ensures that fg-color and stuff is set correctly (I think)
#+end_src

* Interacting with the outside of Emacs

** TODO Emacs anywhere

https://github.com/zachcurry/emacs-anywhere

#+name: emacs-anywhere
#+begin_src emacs-lisp 
;; emacs-anywhere: https://github.com/zachcurry/emacs-anywhere
(defun github-conversation-p (app-name window-title)
  (and
   (string-match-p "google-chrome" (downcase app-name))
   (or (string-match-p "Pull Request #" window-title)
       (string-match-p "Issue #" window-title)
       (string-match-p "Discussion #" window-title))))

(defun plutojl-p (app-name window-title)
  (and
   (string-match-p "google-chrome" (downcase app-name))
   ;; Last part of the window name should be `Pluto.jl'
   (string-match-p "Pluto\\.jl$" window-title)))

(defun popup-handler (app-name window-title x y w h)
  ;; Resize
  (set-frame-width (selected-frame) 250)
  (set-frame-height (selected-frame) 50)
  ;; set major mode
  (cond
   ((github-conversation-p app-name window-title) (poly-markdown-mode))
   ((plutojl-p app-name window-title) (julia-mode))
   ;; ...
   (t (poly-markdown-mode)) ; default major mode
   ))

;; NOTE: `ea-popup-hook' is used by `emacs-anywhere'.
;; (remove-hook 'ea-popup-hook 'popup-handler)
(add-hook 'ea-popup-hook 'popup-handler)
#+end_src

** =org-protocol.el= and [[https://github.com/sprig/org-capture-extension][org-capture-extension]] (for Firefox & Chrome)
1. Follow the instructions in the README for the extension.
2. Set up some capture templates (also described in the README).
   - NOTE: Example in the README uses =%c=, assuming the link passed to Emacs is added to the kill-ring. This seems to no longer be the case (if you look at the implementation =org-protocol-capture=); instead the link is added to =org-stored-links=, which means that we can include it in the capture template using =%a= or similar (see =org-capture-templates= for more info on alternatives).

* Additional neateties

** Name of Emacs window
#+name: frame-title
#+begin_src emacs-lisp 
;; Format the application/window name as "USER [PROJECT NAME]: FILE"
(setq-default frame-title-format
              '(:eval
                (format "%s [%s]: %s"
                        "Persp"
                        ;; (or (file-remote-p default-directory 'user)
                        ;;     user-real-login-name)
                        ;; (or (file-remote-p default-directory 'host)
                        ;;     system-name)
                        ;; (projectile-project-name)
                        (persp-current-name)
                        (buffer-name)
                        )))
#+end_src

* Result

** Full config
#+name: el-full-init
#+begin_src emacs-lisp :comments noweb :tangle init-full.el :noweb yes
<<pkg-management>>
<<basics>>
<<os-specifics>>
<<the-holy-quaternity>>
<<ui>>
<<project>>
<<workspace>>
<<editing>>
<<terminal-emulation>>
<<completion>>
<<file-viewers>>
<<programming>>
<<org>>
<<citations>>
<<mail>>
<<themes>>
<<frame-title>>
<<load-custom-file>>
#+end_src


** Minimalist config
#+name: el-minimal-init
#+begin_src emacs-lisp :comments noweb :tangle init-minimal.el :noweb yes
<<pkg-management>>
<<basics>>
<<os-specifics>>
<<the-holy-quaternity>>
<<load-custom-file>>
#+end_src


