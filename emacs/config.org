#+PROPERTY: header-args :tangle no :noweb yes :results no :eval no :comments noweb
#+TITLE: Tor's init

* Overview
I've made many attempts at structuring my Emacs configuration, so why not try once more.

Mistakes from the past:
1. Not descriptive enough comments with each package to know how to set it up properly.
   - Need to provide more context.
2. For a while we didn't use =straight.el=, but now we are so we should make use of everything it provides.
   - For example, we should use =straight-freeze-versions=.
3. Having an =init.el= file in addition to a =init.org= is too god-damn tempting!
   - When messing around with something, it's just too easy to mess around with `=init.el= instead of =init.org=.
   - One easy fix is to just remove the usage of =init.el= "completely", i.e. we use something like =(org-babel-load-file ...)= to evaluate the =init.org= (which then generates the =init.el=)
     - Good example: https://emacs.stackexchange.com/a/3147
   - So what we're going to do is that we'll include a /slightly/ customized version of =org-babel-load-file= for which we can specify which file to tangle to.
     - Allows us to define the full configs by specifying two different blocks:
       - =init-minimal.el=: defines a minimalist config which can be useful in scenarios where I don't need all the bells and whistles, e.g. if I want to do some remote editing through thet terminal.
       - =init-full.el=: the full init file I use on my personal devices.
 
So. The strategy will be as follows.
1. Different topics / packages get their own section.
2. Every src-block should have a unique name.
3. In the end, each "full" config should have it's ownn src-block where we use =:noweb yes= to include other src-blocks + =:comments noweb= so we can get a sense of where things came from by looking at the resulting =init.el= file.
4. We create a =Makefile= which does all the necessary stuff on a new installation, i.e.:
   1. Run =emacs= to tangle the file.
   2. Link the files we want linked, e.g. snippets.

Some other significant changes:
1. Replace the beloved =helm= with =vertico= + =marginalia= + =consult= + =embark=.
2. Repalce =org-ref= with =citar= and =org-cite.el=.

* Loading the config
As mentioned in the overview, we're going to take the following approach in main init file:
#+begin_src emacs-lisp :tangle init.el
(require 'org)

;; A copy-paste from https://github.com/bzg/org-mode/blob/bd468136dd1a2172302b3ec980c5e6b6e327d683/lisp/org.el#L249-L279
;; but with the option of specifying the tangled file `file-out'.
;; Note that if blocks have specified a `:tangle' header, only those matching `file-out'
;; will indeed be tangled.'
(defun my/org-babel-load-file (file &optional file-out compile)
  "Load Emacs Lisp source code blocks in the Org FILE to FILE-OUT.
This function exports the source code using `org-babel-tangle'
and then loads the resulting file using `load-file'.  With
optional prefix argument COMPILE, the tangled Emacs Lisp file is
byte-compiled before it is loaded."
  (interactive "fFile to load: \nP")
  (let ((tangled-file (if file-out file-out (concat (file-name-sans-extension file) ".el"))))
    ;; Tangle only if the Elisp file is older than the Org file.
    ;; Catch the case when the .el file exists while the .org file is missing.
    (unless (file-exists-p file)
      (error "File to tangle does not exist: %s" file))
    (when (file-newer-than-file-p file tangled-file)
      (org-babel-tangle-file file
                             tangled-file
                             (rx string-start
                                 (or "emacs-lisp" "elisp")
                                 string-end))
      ;; Make sure that tangled file modification time is
      ;; updated even when `org-babel-tangle-file' does not make changes.
      ;; This avoids re-tangling changed FILE where the changes did
      ;; not affect the tangled code.
      (when (file-exists-p tangled-file)
        (set-file-times tangled-file)))
    (if compile
	    (progn
	      (byte-compile-file tangled-file)
	      (load-file (byte-compile-dest-file tangled-file))
	      (message "Compiled and loaded %s" tangled-file))
      (load-file tangled-file)
      (message "Loaded %s" tangled-file))))

;; Actually load the file we're interested in.
(my/org-babel-load-file
 (expand-file-name "config.org" user-emacs-directory)    ;; <= this file
 (expand-file-name "init-full.el" user-emacs-directory)) ;; <= the tangled file
#+end_src

If we instead wanted to load the minimalist file, we would just replace the last part in the above by

#+begin_src emacs-lisp
;; Actually load the file we're interested in.
(my/org-babel-load-file
 (expand-file-name "config.org" user-emacs-directory)       ;; <= this file
 (expand-file-name "init-minimal.el" user-emacs-directory)) ;; <= the tangled file
#+end_src

* Package management: =straight.el= and =use-package=
#+name: pkg-management
#+begin_src emacs-lisp
;; straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(defun my/straight-installed-p (package)
  "Check if PACKAGE is installed (according to `straight.el')."
  (straight--installed-and-buildable-p
   ;; `format' allows us to handle both strings and symbols.
   (gethash (format "%s" package) straight--recipe-cache)))

;; use-package.el: Makes configuring the packages much easier.
(straight-use-package 'use-package)

;; Use `straight.el` by default when calling `use-package`.
(setq straight-use-package-by-default t)

;; Allow us to "require" system packages to be present using `:ensure-system-package'
;; in `use-package' blocks.
(use-package use-package-ensure-system-package)
#+end_src

* General utilities
** Basic variables
#+name: basics--variables
#+begin_src emacs-lisp 
;; Customize user interface.
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)

(setq inhibit-startup-screen t)
(column-number-mode)

;; Don't show trailing whitespace _always_. It's annoying.
(setq-default show-trailing-whitespace nil)
(setq-default indicate-empty-lines t)
(setq-default indicate-buffer-boundaries 'left)

;; Consider a period followed by a single space to be end of sentence.
(setq sentence-end-double-space nil)

;; Use spaces, not tabs, for indentation.
(setq-default indent-tabs-mode nil)

;; Display the distance between two tab stops as 4 characters wide.
(setq-default tab-width 4)

;; Indentation setting for various languages.
(setq c-basic-offset 4)
(setq js-indent-level 2)
(setq css-indent-offset 2)

;; Highlight matching pairs of parentheses.
(setq show-paren-delay 0)
(show-paren-mode)

;; Move the point to bottom/top when using `C-v' and `M-v', respectively,
;; rather than just trying to scroll.
(setq scroll-error-top-bottom t)

;; Disable blinking cursor.
(setq-default visible-cursor nil)
;; (blink-cursor-mode 0) ;; Should be unnecessary on Emacs >24?
#+end_src

** Utility functions
#+name: basics--utility-functions
#+begin_src emacs-lisp
(defun not-nil-p (x)
  "Return `t` if X is not nil."
  (not (not x)))
#+end_src

** Make =format-time-string= consistent across OS time settings
#+name: basics--format-time-string-consistency
#+begin_src emacs-lisp
;; Ensures that we're always going to format the string according to EN locale.
;; Setting `system-time-locale' to `"C"' or something doesn't work for daemon-mode.
;; This is copy-paste from https://kisaragi-hiu.com/blog/2019-10-09-format-time-string-today.html.
(require 'calendar)
(defun kisaragi/english-dow (&optional time zone abbreviated)
  "Return ABBREVIATED name of the day of week at TIME and ZONE.

If TIME or ZONE is nil, use `current-time' or `current-time-zone'."
  (unless time (setq time (current-time)))
  (unless zone (setq zone (current-time-zone)))
  (calendar-day-name
   (pcase-let ((`(,_ ,_ ,_ ,d ,m ,y . ,_)
                (decode-time time zone)))
     (list m d y))
   abbreviated))

(defun kisaragi/advice-format-time-string (func format &optional time zone)
  "Pass FORMAT, TIME, and ZONE to FUNC.

Replace \"%A\" in FORMAT with English day of week of today,
\"%a\" with the abbreviated version."
  (let* ((format (replace-regexp-in-string "%a" (kisaragi/english-dow time zone t)
                                           format))
         (format (replace-regexp-in-string "%A" (kisaragi/english-dow time zone nil)
                                           format)))
    (funcall func format time zone)))


(advice-add 'format-time-string :around #'kisaragi/advice-format-time-string)
#+end_src

** File backup
#+name: basics--file-backup
#+begin_src emacs-lisp
;; Write auto-saves and backups to separate directory.
(make-directory "~/.emacs.d/file-backups/auto-save/" t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/file-backups/auto-save/" t)))
(setq backup-directory-alist '(("." . "~/.emacs.d/file-backups/backup/")))

;; Do not move the current file while creating backup.
(setq backup-by-copying t)

;; Disable lockfiles.
(setq create-lockfiles nil)
#+end_src

** Custom settings in seperate file
Let's keep the customization of, well, customizable variables in a separate file so as to avoid it cluttering the =init.el=.

#+name: basics--custom-file
#+begin_src emacs-lisp
;; Write customizations to a separate file instead of this file.
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file t)
#+end_src

** Result
#+name: basics
#+begin_src emacs-lisp 
<<basics--variables>>
<<basics--utility-functions>>
<<basics--format-time-string-consistency>>
<<basics--file-backup>>
<<basics--custom-file>>
#+end_src

* OS specific setup

** Linux
#+name: os-specifics--linux
#+begin_src emacs-lisp
;; Linux
(defmacro when-linux (body)
  "Evaluate BODY if the system type is `gnu/linux'."
  `(when (eq system-type 'gnu/linux)
     ,body))

(when-linux
  ;; NOTE: this will also be hit in WSL.
  (use-package exec-path-from-shell)
  (exec-path-from-shell-initialize)

  ;; use xclip to yank, allowing you to yank in terminal to the GLOBAL clipboard
  (use-package xclip
    :init (xclip-mode)))
#+end_src

** Windows Linux Subsystem
#+name: os-specifics--wsl-copy
#+begin_src emacs-lisp
(defun tor/is-wsl-p ()
  ;; WSL: WSL1 has "-Microsoft", WSL2 has "-microsoft-standard"
  (not-nil (string-match "-[Mm]icrosoft" operating-system-release)))

(defmacro when-wsl (body)
  "Evaluate BODY if running in WSL."
  `(when (tor/is-wsl-p)
     ,body))

(when-wsl
  ;; Source: https://www.emacswiki.org/emacs/Emacs_and_the_Windows_Subsystem_for_Linux
  (defun wsl-copy-region-to-clipboard (start end)
    "Copy region to Windows clipboard."
    (interactive "r")
    (call-process-region start end "clip.exe" nil 0))

  (defun wsl-clipboard-to-string ()
    "Return Windows clipboard as string."
    (let ((coding-system-for-read 'dos))
      (substring				; remove added trailing \n
       (shell-command-to-string
        "powershell.exe -Command Get-Clipboard") 0 -1)))

  (defun wsl-paste-from-clipboard (arg)
    "Insert Windows clipboard at point. With prefix ARG, also add to kill-ring"
    (interactive "P")
    (let ((clip (wsl-clipboard-to-string)))
      (insert clip)
      (if arg (kill-new clip)))))
#+end_src

** Result
#+name: os-specifics
#+begin_src emacs-lisp 
<<basics--linux-specific>>
<<basics--wsl-specific>>
#+end_src



* =~/.authinfo=
- Effectively a very simple plain-text password manager with encryption (if used right)
- Nicely supported in Emacs
  - Also comes with Python bindings (though py3 requires a bit of fiddling)

** Python 3
- Can be useful for other integrations, e.g. I'm already sending emails using Emacs so if I write a Python script, it's nice if I can also just use the auth-information already present in my =~/.authinfo=
- Requires building =authinfo= from scratch
  - Also requires a particular fork: https://github.com/torfjelde/authinfo
- A simple =make install= copies the python package into =/usr/local/lib/python3.8/site-packages= which, unfortunately, isn't loaded (unless you're running the global python interpreter, which is rare these days).
  - A simple fix: =mv= the above to =/usr/local/lib/python3.8/dist-packages= which is loaded by every python installation (this is consider the /global/ repository for packages)
- Possible error: missing shared library =libauthinfo.so.0=
  - The =libauthinfo.so.0= file /should/ be present in =/usr/local/lib= or something equivalent (look for =libauthinfo.so.0= in the output for of the =make install=).
  - So this can be fixed by making sure that Python is indeed looking for shared libraries there, f.ex. by running =export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH=.
- Also a useful resource if needed: https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources

* Programming
** Jupyter
#+name: jupyter
#+begin_src emacs-lisp
;; This is awesome _but_ requires an Emacs version built with dynamic modules.
;; See https://github.com/nnicandro/emacs-zmq for more information on this.
;; But if this has been done, then you cna uncomment the line below.
(use-package jupyter
  :after org
  :straight (jupyter :type git
                     :host github
                     :repo "torfjelde/emacs-jupyter"
                     :branch "torfjelde/filename-extension-for-custom-file")
  :bind (:map jupyter-repl-interaction-mode-map
              ("C-<return>" . jupyter-eval-line-or-region)
              ("C-M-<return>" . jupyter-eval-defun))
  :config
  ;; Evaluate python and julia blocks using jupyter.
  (org-babel-jupyter-override-src-block "julia")
  (org-babel-jupyter-override-src-block "python")
  (setq org-babel-default-header-args:jupyter-julia '((:async . "yes")
                                                      (:session . "jl")
                                                      (:kernel . "julia-1.8")))
  (setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                       (:session . "py")
                                                       (:kernel . "python3"))))
#+end_src
* Org

** Tor's reading list
I have an agenda file that is, effectively, my reading list.

This is a reading list which:
- I can add to by using =org-capture=, and it automatically figures out the new index for the item.
- Upon submitting a new item, the list will be sorted.

To achieve the above, I need to define some methods before I can define the =org-capture= templates, etc.

#+name: org--tors-reading-list
#+begin_src emacs-lisp 
;; Tor's reading list and stuff
(defun tor/element--sort-elements-by-raw-value (el1 el2)
  "Compare :raw-value of EL1 and EL2, returning true if EL2 > EL1."
  (string-greaterp (org-element-property :raw-value el2)
		   (org-element-property :raw-value el1)))

(defun tor/element--get-begin (el)
  "Get beginning of EL."
  (org-element-property :begin el))

(defun tor/element--get-end (el)
  "Get end of EL."
  (org-element-property :end el))

(defun tor/reading-list-sort (&optional level)
  "Sort reading list at LEVEL."
  (interactive)
  (let* ((i 0)
	 (headline-level (or level 1))
	 (parsed (org-element-parse-buffer))
	 (headlines (-filter (lambda (el) (= (org-element-property :level el) headline-level)) 
			    (org-element-map parsed 'headline 'identity)))
	 (start (-min (-map 'tor/element--get-begin headlines)))
	 (end (-max (-map 'tor/element--get-end headlines))))
    (delete-region start end)
    (goto-char start)
    (insert (string-join
	     ;; TODO: update indices
	     (-map
	      (lambda (el)
		(progn
		  (setq i (+ i 1))
		  (replace-regexp-in-string "* TODO [0-9]+\\."
					    (format "* TODO %03d." i)
					     el)))
	      (-map 'org-element-interpret-data
			 (sort headlines 'tor/element--sort-elements-by-raw-value)))
	     ""))))

(defun tor/reading-list--get-next-idx (&optional level category)
  "Get index for reading list at LEVEL and ."
  (let* ((headline-level (or level 1))
	 (parsed (org-element-parse-buffer))
	 (headlines (-filter (lambda (el) (and (= (org-element-property :level el) headline-level)
					  ;; FIXME: BROKEN. Grab this from the property-drawer
					  (if category
					      (org-element-property :category el)
					    t)))
			     (org-element-map parsed 'headline 'identity))))
    (+ 1 (-max
	  (or (-filter
	       (lambda (x) (not (= x 0)))
	       (-map (lambda (el)
		       (string-to-number
			(car (split-string
			      (org-element-property :raw-value el) "\\."))))
		     headlines))
	      '(0))))))

(defun tor/reading-list-next-idx ()
  (save-excursion
    (with-current-buffer (find-file-noselect "~/Dropbox/org/reading.org")
      (format "%03d" (tor/reading-list--get-next-idx)))))
#+end_src

** Agenda utilities
#+name: org--agenda-utilities
#+begin_src emacs-lisp 
(defun my/org-skip-subtree-if-priority (priority)
  "Skip an agenda subtree if it has a priority of PRIORITY.

PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
      nil)))

(defun my/pop-to-org-agenda ()
  "Visit the org agenda in the current window."
  (interactive)
  (let ((org-agenda-window-setup 'current-window))
    (org-agenda nil "c")))
#+end_src

** =org=
#+name: org--main
#+begin_src emacs-lisp 
(use-package org
  ;; Ensures that we're using the version of `org` which comes with Emacs.
  :straight (org :type built-in)
  :hook  
  ;; Use `visual-line-mode' as it gives word-wrapping, etc.
  (org-mode . visual-line-mode)
  :config
  ;; TODO: Move many of these `setq' statements to `:custom' below.
  ;; Customization for latex-preview in org-mode
  (setq org-format-latex-options '(:foreground default
                                               :background default
                                               :scale 1.5
                                               :html-foreground "steelblue"
                                               :html-background "Transparent"
                                               :html-scale 1.0
                                               :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))

  ;; During LaTeX export, try to preserve the labels defined by the user.
  (setq org-latex-prefer-user-labels t)
  ;; Hide emphasis markup.
  (setq org-hide-emphasis-markers nil)
  ;; Use bullets for lists.
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  ;; Don't query us every time we trying to evaluate code in buffers.
  (setq org-confirm-babel-evaluate nil)
  ;; Don't indent text in a section to align with section-level.
  (setq org-adapt-indentation nil)
  ;; Don't indent body of code-blocks at all.
  (setq org-edit-src-content-indentation 0)
  ;; Allow setting variables in setup-files.
  (setq org-export-allow-bind-keywords t)
  ;; Where to store the generated images from `org-latex-preivew'. This '/' at the end is VERY important.
  (setq org-preview-latex-image-directory "~/.ltximg/")
  ;; Make it so that the src block is opened in the current window when we open to edit.
  (setq org-src-window-setup 'current-window)
  ;; Necessary for header-arguments in src-blocks to take effect during export.
  (setq org-export-use-babel t)
  ;; Disable execution of code-blocks on export by default.
  (add-to-list 'org-babel-default-header-args '(:eval . "never-export"))

  ;; Don't use the actual width of an image when previewing.
  ;; Allows us to specify the width of the image using something like `#+ATTR_ORG: :width 600'.
  (setq org-image-actual-width nil)

  ;; Make `org-goto' nice to work with.
  ;; Source: https://emacs.stackexchange.com/a/32625
  ;; Complete on outlines/headings.
  ;; This uses `completing-read' behind the scenes, hence if you have something like
  ;; `helm' or `ivy' activated, this will be used for the completion.
  (setq org-goto-interface 'outline-path-completion)
  ;; Don't try to complete headings in steps.
  (setq org-outline-path-complete-in-steps nil)

  (setq org-default-notes-file "~/Dropbox/org/gtd.org")
  (setq org-refile-targets '(("~/Dropbox/org/gtd.org" :maxlevel . 2)))

  ;; Org-agenda / Org-capture related
  (setq org-agenda-files
        (append
         '("~/Dropbox/org/gtd.org"
           "~/Dropbox/org/school.org"
           "~/Dropbox/org/reading.org"
           "~/Dropbox/org/implement.org"
           "~/Dropbox/org/random.org")
         ;; Also add todos from consulting projects.
         (directory-files-recursively "~/Dropbox/consulting/" "\\todos.org$")))

  (require 'org-protocol)
  ;; Adds some `private/*' variables that I don't want on my Github.
  (load (expand-file-name "~/Dropbox/dotfiles/.emacs/agenda.el"))
  (setq org-capture-templates
        (append
         '(("t"        ;; shortcut
            "Todo"     ;; title
            entry      ;; type of template
            (file+headline "~/Dropbox/org/gtd.org" "Tasks")  ;; what and where to add
            "* TODO %^{Brief Description} %^g\nEntered on %U\n%?\n%i\n%a"  ;; template
            :empty-lines 1 ;; property
            )

           ("j" "Journal" entry (file+datetree "~/Dropbox/org/journal.org")
            "* %^{Description}\nEntered on %U\n%a\n%?" :empty-lines 1)

           ("i" "Idea" item (file "~/Dropbox/org/ideas.org"))

           ("s" "School" entry
            (file "~/Dropbox/org/school.org")
            "* TODO %^{Brief Description} %^{COURSE}p %^g\n%?" :empty-lines 1)

           ("r" "Reading" entry (file "~/Dropbox/org/reading.org")
            "* TODO %(tor/reading-list-next-idx). %?\nEntered on %U\n%a\n%i")

           ("R" "Research" entry (file "~/org-blog/notes/research.org")
            "* %^{Title} %^g\n:PROPERTIES:\n:DATE: %U\n:SOURCE: %a\n:END:\n%i\n%?")

           ("I" "Implement" entry (file "~/Dropbox/org/implement.org")
            "* TODO %(tor/impl-list-next-idx). %?\nEntered on %U\n%a\n%i")

           ;; NOTE: the `ANKI_DECK' property will use auto-completion from `anki-editor.el'
           ;; and thanks to the use of `anki-editor-mode' in `~/Dropbox/org/anki.org'
           ;; we also get autocomplete for the tags.
           ("a" "Anki basic"
            entry
            (file+headline org-my-anki-file "Dispatch Shelf")
            "* %U   %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Basic\n:END:%^{ANKI_DECK}p\n** Front\n%?\n** Back\n%x\n")

           ("A" "Anki cloze"
            entry
            (file+headline org-my-anki-file "Dispatch Shelf")
            "* %U   %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Cloze\n:END:%^{ANKI_DECK}p\n** Text\n%x\n** Extra\n")

           ("c" "Code"
            entry
            (file+headline "~/Dropbox/org/gtd.org" "Code")
            "* TODO %^{TITLE} %^G\n:PROPERTIES:\n:Created: %U\n:Source: %a\n:END:\n%i%?"
            :prepend t	 ; properties
            :empty-lines 1	 ; properties
            :created t	 ; properties
            :kill-buffer t)

           ;; Template for different projects.
           ;; NOTE: This is often extended by `private/org-capture-templates'.
           ("P" "Projects")

           ;; org-protocol.el
           ;; TODO: Evaluate whether or not we want to keep this.
           ("p" "Protocol" entry
            (file "~/Dropbox/org/random.org")
            "* %^{Title}\n:PROPERTIES:\n:Created: %U\n:Source: %a\n:END:\n\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?"
            :empty-lines 1
            :created t)

           ("L" "Protocol Link" entry
            (file "~/Dropbox/org/random.org")
            "* %^{TITLE}\n:PROPERTIES:\n:Created: %U\n:Source: [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n:END:\n%?"
            :empty-lines 1
            :created t)
           )
         ;; Some private capture templates.
         private/org-capture-templates))

  ;; Some custom views for `org-agenda'.
  (setq org-agenda-custom-commands
        '(("r" alltodo "" ((org-agenda-files '("~/Dropbox/org/reading.org"))))
          ("c" "My agenda view"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (agenda "" ((org-agenda-span 1)
                        (org-habit-graph-column 60)))
            ;; TODO: Do we need a weekly view too?
            (agenda "")
            (alltodo ""
                     ((org-agenda-files '("~/Dropbox/org/reading.org"))
                      (org-agenda-overriding-header "Papers (top 5):")
                      (org-agenda-max-entries 5)
                      (org-agenda-skip-function '(org-agenda-skip-subtree-if 'regexp ":BOOK:"))))
            (alltodo ""
                     ((org-agenda-files '("~/Dropbox/org/reading.org"))
                      (org-agenda-overriding-header "Readings (top 5):")
                      (org-agenda-max-entries 5)))
            (alltodo ""
                     ((org-agenda-skip-function
                       '(or (my/org-skip-subtree-if-priority ?A)
                            (org-agenda-skip-if nil '(scheduled deadline))
                            (org-agenda-skip-subtree-if 'regexp ":RECURRING:")))
                      (org-agenda-files '("~/Dropbox/org/gtd.org")))))
           ((org-agenda-compact-blocks nil)))))

  ;; Hooks.
  ;; If `flycheck` is installed, disable `flycheck` in src-blocks.
  ;; NOTE: This is maybe a bit "drastic". Could potentially just disable certain
  ;; features of `flycheck`.
  (when (my/straight-installed-p 'flycheck)
    (require 'flycheck)
    (defun disable-flycheck-in-org-src-block ()
      (flycheck-mode -1))
    (add-hook 'org-src-mode-hook 'disable-flycheck-in-org-src-block))

  ;; https://emacs.stackexchange.com/a/18146
  ;; I want this bindings for references, etc. + don't add files to agenda
  ;; often enough to warrant having a binding for it.
  (require 'bind-key)
  ;; I use these keybindings for references, etc.
  (unbind-key "C-c [" org-mode-map)
  (unbind-key "C-c ]" org-mode-map)
  ;; I like using these for partial completions, e.g. with copilot.
  (unbind-key "<M-return>" org-mode-map)
  (unbind-key "M-RET" org-mode-map)
  ;; `C-c .' is used for `org-time-stamp-active', so this seems natural.
  (unbind-key "C-c ," org-mode-map)
  (bind-key "C-c ," 'org-time-stamp-inactive org-mode-map)

  ;;;; Org-Babel ;;;;
  ;; Specify which programming languages to support in code-blocks.
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp t)
     (shell . t)
     (C . t)
     (latex . t)
     (python . t)
     ;; (jupyter . t)
     ;; (julia-vterm . t)
     ;; (julia . t)
     (R . t)
     (dot . t)
     ))

  :custom
  ;; Now that we have `org-cite.el`, we can use stuff like CSL.
  (org-cite-export-processors
   '((latex biblatex)
     (t csl)))
  ;; TODO: Maybe just clone the repo from init if it doesn't exist?
  (org-cite-csl-styles-dir "/home/tor/Projects/public/styles/")

  ;; Latex stuff.
  (org-format-latex-header
   "\\documentclass{article}
\\usepackage[usenames]{color}
[PACKAGES]
[DEFAULT-PACKAGES]
\\pagestyle{empty}             % do not remove
% The settings below are copied from fullpage.sty
\\setlength{\\textwidth}{\\paperwidth}
\\addtolength{\\textwidth}{-3cm}
\\setlength{\\oddsidemargin}{1.5cm}
\\addtolength{\\oddsidemargin}{-2.54cm}
\\setlength{\\evensidemargin}{\\oddsidemargin}
\\setlength{\\textheight}{\\paperheight}
\\addtolength{\\textheight}{-\\headheight}
\\addtolength{\\textheight}{-\\headsep}
\\addtolength{\\textheight}{-\\footskip}
\\addtolength{\\textheight}{-3cm}
\\setlength{\\topmargin}{1.5cm}
\\addtolength{\\topmargin}{-2.54cm}")

  (org-latex-default-packages-alist
   '(("AUTO" "inputenc" t
      ("pdflatex"))
     ("T1" "fontenc" t
      ("pdflatex"))
     ("" "graphicx" t nil)
     ("" "grffile" t nil)
     ("" "longtable" nil nil)
     ("" "wrapfig" nil nil)
     ("" "rotating" nil nil)
     ("normalem" "ulem" t nil)
     ("" "amsmath" t nil)
     ("" "textcomp" t nil)
     ("" "amssymb" t nil)
     ("" "capt-of" nil nil)
     ("breaklinks=true" "hyperref" nil nil)
     ("" "mathpazo" t nil)
     ("" "eulervm" t nil)))

  (org-preview-latex-process-alist
   '((dvipng :programs
             ("latex" "dvipng")
             :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust
             (1.0 . 1.0)
             :latex-compiler
             ("latex -interaction nonstopmode -output-directory %o %f")
             :image-converter
             ("dvipng -D %D -T tight -bg 'Transparent' -o %O %f"))
     (dvisvgm :programs
              ("latex" "dvisvgm")
              :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :image-input-type "dvi" :image-output-type "svg" :image-size-adjust
              (1.7 . 1.5)
              :latex-compiler
              ("latex -interaction nonstopmode -output-directory %o %f")
              :image-converter
              ("dvisvgm %f -n -b min -c %S -o %O"))
     (imagemagick :programs
                  ("latex" "convert")
                  :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :image-input-type "pdf" :image-output-type "png" :image-size-adjust
                  (1.0 . 1.0)
                  :latex-compiler
                  ("pdflatex -interaction nonstopmode -output-directory %o %f")
                  :image-converter
                  ("convert -density %D -trim -antialias %f -quality 100 %O"))))
  )
#+end_src

** Babel
**** =ob-async=
#+name: org--ob-async
#+begin_src emacs-lisp 
;; NOTE: Attempt at fixing issue with `ob-async'.
;; Source: https://github.com/astahlman/ob-async/issues/75#issuecomment-766783255
(use-package ob-async
  ;; :straight (:type git :host github :repo "astahlman/ob-async")
  ;; Handling of errors: https://github.com/astahlman/ob-async/issues/75#issuecomment-766783255
  ;; + some of my changes.
  :straight (:type git :host github :repo "torfjelde/ob-async" :branch "tor/develop")
  :config
  ;; NOTE: Fixes issue when interacting with `jupyter'.
  ;; https://github.com/nnicandro/emacs-jupyter/issues/383#issuecomment-1020919685
  (setq ob-async-no-async-languages-alist '("python" "julia" "jupyter-python" "jupyter-julia")))
#+end_src

*** =ob-julia=
#+name: org--ob-julia
#+begin_src emacs-lisp 
;; HACK: Need to load this here to ensure that we don't end up installing `org' (which is likely
;; to be a dependency of `ob-*' babel) using the wrong recipe.
;; TODO: Shoud we just load this after `org', and then call `org-babel-do-load-languages' in
;; that `use-package' block instead?
(use-package ob-julia
  :after org
  :straight (:type git :host github :repo "torfjelde/ob-julia" :branch "master"))
#+end_src

** Exports

** =org-reveal=
#+begin_src emacs-lisp
(use-package ox-reveal
  ;; NOTE: Necessary because otherwise we end up trying to load `org-reveal'
  ;; which is actually not provided (despite the name of the project).
  :straight (ox-reveal :host github :repo "torfjelde/org-reveal" :branch "torfjelde/develop")
  :custom
  (org-reveal-extract-mathjax-version-from-url t)
  (org-reveal-mathjax3-version "3.2.2")
  (org-reveal-mathjax3-config
   (json-encode
    '((loader (load . ["[tex]/physics" "[tex]/color"]))
      (tex
       (inlineMath ["$" "$"] ["\\(" "\\)"])
       (packages ("[+]" . ["physics" "color"]))
       (macros (ind . "\\unicode{x1D7D9}"))
       ))))
  (org-reveal-plugin-to-name '((chalkboard . RevealChalkboard)))
  (org-reveal-external-plugins '((RevealChalkboard . ("%splugin/chalkboard/plugin.js" "%splugin/chalkboard/style.css"))))
  )
#+end_src


** Other stuff
** =org-ref=
*** Proper handling of ANSI color codes
#+name: org--ansi-color-codes-handling
#+begin_src emacs-lisp 
;; Source: https://emacs.stackexchange.com/a/63562
(defun ek/babel-ansi ()
  "Properly handle ANSI color codes in the result for a SRC block."
  ;; FIXME(torfjelde): I don't think this works if the result is a single line,
  ;; i.e. NOT wrapped in a `#+begin_example'.
  (when-let ((beg (org-babel-where-is-src-block-result nil nil)))
    (save-excursion
      (goto-char beg)
      (when (looking-at org-babel-result-regexp)
        (let ((end (org-babel-result-end))
              (ansi-color-context-region nil))
          (ansi-color-apply-on-region beg end))))))

(add-hook 'org-babel-after-execute-hook 'ek/babel-ansi)
#+end_src

*** =org-contrib=
#+name: org--contrib
#+begin_src emacs-lisp
(use-package org-contrib
  :config
  (require 'ox-extra)
  ;; Usage of `:ignore' tag on a headline means that this headline will be ignored
  ;; upon export, _but_ its children will still be exported.
  (ox-extras-activate '(ignore-headlines))
  )
#+end_src

*** =org-present=
#+name: org--org-present
#+begin_src emacs-lisp 
;; `org-present'
(use-package org-present
  :after org
  :ensure t
  :config
  
  (defun my/org-present-prepare-slide (buffer-name heading)
    ;; Show only top-level headlines
    (org-overview)

    ;; Unfold the current entry
    (org-show-entry)

    ;; Show only direct subheadings of the slide but don't expand them
    (org-show-children))

  (defun my/org-present-start ()
    ;; Usually going to use `org-present-big' so we store the current settings and update.
    (setq-local org-present--org-format-latex-options org-format-latex-options)
    (setq-local org-format-latex-options '(:foreground default
                                                       :background default
                                                       :scale 3.0
                                                       :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))

    ;; Since the latex generated will be quite a different size, we use
    ;; a different output folder.
    (setq-local org-present--org-preview-latex-image-directory org-preview-latex-image-directory)
    (setq-local org-preview-latex-image-directory "~/.ltximg-present/")

    ;; Set a blank header line string to create blank space at the top
    (setq header-line-format " ")

    ;; Display inline images automatically
    (org-display-inline-images)

    ;; Center the presentation and wrap lines
    (visual-line-mode 1))

  (defun my/org-present-end ()
    ;; (setq-local face-remapping-alist '((default default)))

    ;; Reset the latex preview stuff.
    (setq-local org-format-latex-options org-present--org-format-latex-options)
    (setq-local org-preview-latex-image-directory org-present--org-preview-latex-image-directory)
    
    ;; Clear the header line string so that it isn't displayed
    (setq header-line-format nil)

    ;; Stop displaying inline images
    (org-remove-inline-images)

    ;; Stop centering the document
    (visual-line-mode 0))
  
  ;; Register hooks with org-present
  (add-hook 'org-present-mode-hook #'my/org-present-start)
  (add-hook 'org-present-mode-quit-hook #'my/org-present-end)
  (add-hook 'org-present-after-navigate-functions #'my/org-present-prepare-slide))
#+end_src


** Result
#+name: org
#+begin_src emacs-lisp
<<org--tors-reading-list>>
<<org--agenda-utilities>>
<<org--main>>

<<org--ob-async>>
<<org--ob-julia>>

<<org--contrib>>
<<org--ansi-color-codes-handling>>
#+end_src
* Email
** Aim
There are two needs:
1. Retrieving emails.
   - Which we'll solve using *internet message access protocol (IMAP)*.
2. Sending emails.
   - Which we'll solve using *simple mail transport protocol (SMTP)*.
3. An interface (in Emacs) that unifies the two.

** Retrieving emails using =offlineimap=

*** Integration with different providers

**** Outlook

***** =davmail=
- Effectively functions as a local email server, handling everything between you and Outlook, e.g. authentication.

#+begin_src shell :results output :wrap "src conf" :eval no
less ~/.offlineimaprc
#+end_src

#+RESULTS:
#+begin_src conf
[general]
accounts = account-1,account-2,account-3,account-4
maxsyncaccounts = 4
# Path to file with arbitrary Python code to load.
pythonfile = ~/.offlineimap.py

[Account account-2]
localrepository = account-2-local
remoterepository = account-2-exchange
# postsynchook = $HOME/.local/bin/check-email

[Repository account-2-local]
type = Maildir
localfolders = $HOME/mail/account-2@cam.ac.uk
# TODO: This is too aggressive.
nametrans = lambda folder: folder.replace('sent', 'Sent Items')

[Repository account-2-exchange]
type = IMAP
ssl = no
remotehost = localhost
remoteport = 1143
remoteuser = account-2@cam.ac.uk
remotepass = asdfas # it's not actually used
# createFolders = False # don't create folders remotely
# readonly = yes
# TODO: This is too aggressive.
nametrans = lambda folder: folder.replace('Sent Items', 'sent')
folderfilter = lambda folder: "Hermes" not in folder

[Account account-3]
localrepository = account-3-local
remoterepository = account-3-exchange
# postsynchook = $HOME/.local/bin/check-email

[Repository account-3-local]
type = Maildir
localfolders = $HOME/mail/account-3_coms@darwin.cam.ac.uk
# TODO: This is too aggressive.
nametrans = lambda folder: folder.replace('sent', 'Sent Items')

[Repository account-3-exchange]
type = IMAP
ssl = no
remotehost = localhost
remoteport = 1143
remoteuser = account-@cam.ac.uk/account-3_coms@darwin.cam.ac.uk
remotepass = asdfas # it's not actually used
# This is really stupid.
folderfilter = lambda folder: '/users/account-3_coms@darwin/cam/ac/uk/' not in folder
# createFolders = False # don't create folders remotely
# readonly = yes
# TODO: This is too aggressive.
nametrans = lambda folder: folder.replace('Sent Items', 'sent')

[Account account-1]
localrepository = account-1-local
remoterepository = account-1-remote
# postsynchook = $HOME/.local/bin/check-email

[Repository account-1-remote]
type = Gmail
remoteuser = account-1@gmail.com
remotepasseval = get_authinfo_password("smtp.gmail.com", "account-1@gmail.com", 587)
ssl = yes
sslcacertfile = OS-DEFAULT

[Repository account-1-local]
type = GmailMaildir
localfolders = $HOME/mail/account-1@gmail.com


[Account account-4]
localrepository = account-4-local
remoterepository = account-4-remote
# postsynchook = $HOME/.local/bin/check-email

[Repository account-4-remote]
type = Gmail
remoteuser = account-4@gmail.com
remotepasseval = get_authinfo_password("smtp.gmail.com", "account-4@gmail.com", 587)
ssl = yes
sslcacertfile = OS-DEFAULT

[Repository account-4-local]
type = GmailMaildir
localfolders = $HOME/mail/account-4@gmail.com
#+end_src

Note: the accounts in the above are anonymized so I can avoid a bit of spam, which is always nice.

****** Setup

**** TODO Gmail

*** Authentication
- Using =~/.authinfo= to store the passwords (this is also used by Emacs' SMTP functionality)
- Need some setup to make =offlineimap= work nicely with this.

#+begin_src python
#!/usr/bin/env python2
import re, os, sys


def get_authinfo_password(machine, login, port):
    "Extracts password from `~/.authinfo` for a given `machine`, `login`, `port` combination."
    s = "machine %s login %s port %s password (.*)$" % (machine, login, port)
    p = re.compile(s, flags=re.MULTILINE)
    # TODO: Use encrypted `.authinfo`.
    # authinfo = os.popen("gpg -q --no-tty -d ~/.authinfo.gpg").read()
    with open("/home/tor/.authinfo", "r") as f:
        authinfo = f.read()

    return p.search(authinfo).group(1)


if __name__ == "__main__":
    # Useful for testing.
    print(get_authinfo_password(sys.argv[1], sys.argv[2], sys.argv[3]))
#+end_src

And then we need to load this file in our =.offlineimaprc=:

#+begin_src shell :results output :wrap src conf :eval no :exports output
sed -n "1,5p" ~/.offlineimaprc
#+end_src

#+RESULTS:
#+begin_src conf
[general]
...
# Path to file with arbitrary Python code to load.
pythonfile = ~/.offlineimap.py
#+end_src

Now we can use the =remotepasseval= setting for the remote repositories to extract the auth info:

#+begin_src conf :eval no :exports code
# NOTE: Usually here we should be using `imap.gmail.com`, but we'll be needing the same auth info for SMTP so might as well just re-use
# rather than having multiple entries with the same info in the `~/.authinfo`.
remotepasseval = get_authinfo_password("smtp.gmail.com", "account-4@gmail.com", 587)
#+end_src

#+begin_warning
Some sources on the interwebs says to use =remotepass= in the above, but that doesn't seem to work. 
#+end_warning

** Interfacing with emails using =notmuch=
- Provides a simple and powerful tagging system
- Treats everything as a single big "inbox", allowing us to easily filter based on different tags.
  - Personally find this very useful due to all the different email accounts I manage.

** Setting up =cron= for periodic checking
#+begin_example
# Google won't be happy if we check the email too often, i.e. more frequently than ever 10 mins:
# https://support.google.com/mail/answer/7126229?visit_id=638005640878107785-764406290&p=BadCredentials&rd=2#cantsignin&zippy=%2Ci-cant-sign-in-to-my-email-client
*/10 *  * * *      offlineimap >> $HOME/.logs/offlineimap.log 2>&1
*/1  *  * * *      DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus bash -lc check-email >> ~/.logs/check-mail.log 2>&1
#+end_example

This assumes that the script =check-email= is available in your =PATH=.
There are a couple of things to note here:
- =bash -lc= where
  - =l= is to "Make bash act as if it had been invoked as a login shell", e.g. it will load =~/.profile= and so on.
    - This is mucho importante if you want 
- From https://askubuntu.com/a/1274272: we need the weird stuff before the comand to make sure the =notify-send= works.


** Writing messages
When writing a message, we're in, well =message-mode=. So that's where you should look if you want to change how things are handled.

*** Disabling automatic line-break
I find the automatic breaking of lines a bit annoying, in particular in this day and age when most email clients I send to will have some automatic formatting when viewed.

This can be "disabled"/controlled by setting the value of =message-fill-column= to whatever you desire, e.g. =999999=.

*** Signature
**** Old me
This is handled by =message-signature=, but the generally best approach is probably just to have a =~/.signature= file, which is automatically detected.

For example:

#+begin_example
All the best,
Tor
#+end_example

One annoying thing is that the signature-seperator is /hard-coded/ (I know, crazy) to be "--":

#+begin_src emacs-lisp :eval no
(defun message-insert-signature (&optional force)
  "Insert a signature.  See documentation for variable `message-signature'."
  (interactive (list 0))
  (let ((message-signature message-signature)
	(message-signature-file message-signature-file))
    ;; If called interactively and there's no signature to insert,
    ;; consult the global values to see whether there's anything they
    ;; have to say for themselves.  This can happen when using
    ;; `gnus-posting-styles', for instance.
    (when (and (null message-signature)
	       (null message-signature-file)
	       (eq force 0))
      (setq message-signature (default-value 'message-signature)
	    message-signature-file (default-value 'message-signature-file)))
    (let* ((signature
	    (cond
	     ((and (null message-signature)
		   (eq force 0))
	      (save-excursion
		(goto-char (point-max))
		(not (re-search-backward message-signature-separator nil t))))
	     ((and (null message-signature)
		   force)
	      t)
	     ((functionp message-signature)
	      (funcall message-signature))
	     ((listp message-signature)
	      (eval message-signature))
	     (t message-signature)))
	   signature-file)
      (setq signature
	    (cond ((stringp signature)
		   signature)
		  ((and (eq t signature) message-signature-file)
		   (setq signature-file
			 (if (and message-signature-directory
				  ;; don't actually use the signature directory
				  ;; if message-signature-file contains a path.
				  (not (file-name-directory
					message-signature-file)))
			     (expand-file-name message-signature-file
					       message-signature-directory)
			   message-signature-file))
		   (file-exists-p signature-file))))
      (when signature
	(goto-char (point-max))
	;; Insert the signature.
	(unless (bolp)
	  (newline))
	(when message-signature-insert-empty-line
	  (newline))
	(insert "-- ")  ;; FIXME: THIS GUY!
	(newline)
	(if (eq signature t)
	    (insert-file-contents signature-file)
	  (insert signature))
	(goto-char (point-max))
	(or (bolp) (newline))))))
#+end_src

#+RESULTS:

It's not the worst thing in the world though I guess.
**** [2023-05-23 Tue 12:20] Solution
Just define your own function for inserting the signature and use this, e.g.

#+begin_src emacs-lisp :eval no
(defun my/message-signature ()
  "Insert a signature."
  ;; We want to insert the signature ABOVE the quoted text,
  ;; so we first to go the message body.
  ;; NOTE: This insertion happens prior to inserting the quoted text.
  (message-goto-body)
  (insert "\n\n")
  (insert "All the best,\n")
  (insert "Tor\n"))

(setq message-signature 'my/message-signature)
#+end_src

** Resulting config
#+name: mail
#+begin_src emacs-lisp 
;; Email
;; Useful resources:
;; - https://kkatsuyuki.github.io/notmuch-conf/
;; - https://chrisdone.com/posts/emacs-mail/
;; - Multiple email setup:
;; - https://www.djcbsoftware.nl/code/mu/mu4e/Example-configurations.html#Example-configurations
;;   Example configurations using =mu=, but also invovles some setting of general mail variables
;;   and examples with `offlineimap'.
;; - https://emacs.stackexchange.com/a/12932
;;   Example using `smptmail-multi', which is _very_ useful.
;; - https://protesilaos.com/codelog/2021-05-15-emacs-notmuch/
;;   Demo of `notmuch'.
;; - https://sqrtminusone.xyz/posts/2021-02-27-gmail/
;;   Different approach to syncing with gmail using `lieer'. This also allows syncing tags with gmail.

(setq mail-user-agent 'message-user-agent)

;; Formatting in message-mode.
(setq message-fill-column 999999)

;; The quoted text is always below.
(setq message-cite-reply-position 'above)

;; Signature insertion.
(defun my/message-signature ()
  "Insert a signature."
  ;; We want to insert the signature ABOVE the quoted text,
  ;; so we first to go the message body.
  ;; NOTE: This insertion happens prior to inserting the quoted text.
  (message-goto-body)
  (insert "\n\n")
  (insert "All the best,\n")
  (insert "Tor\n"))

(setq message-signature 'my/message-signature)

;; Replies
(setq message-citation-line-function 'message-insert-formatted-citation-line)
(setq message-citation-line-format "\n\nOn %a, %d/%m/%Y, %f wrote:\n")

(use-package smtpmail-multi
  :ensure t)

;; Load the list of email accounts.
(load (expand-file-name "~/Dropbox/dotfiles/.emacs/emails.el"))

(require 'dash)

(setq my/email-backend-configs
      '((gmail . (
                  ;; `smtpmail-smtp-server'
                  "smtp.gmail.com"
                  ;; `smtpmail-smtp-service'
                  587
                  ;; `mail-specify-envelope-from' will be set to `t', and `mail-envelope-from' will be set to the value
                  header
                  ;; `smptmail-stream-type'
                  starttls
                  ;; STARTTLS key (used to set `smptmail-starttls-credentials')
                  nil ;; TODO: is this correct?
                  ;; STARTTLS certificate (used to set `smtpmail-startttls-credentials')
                  nil ;; TODO: is this correct?
                  ;; `smtpmail-local-domain'
                  nil
                  ))
        (outlook . ("localhost" 1025 header nil))))

(defun my/make-smtpmail-multi-accounts-alist (accounts)
  "Make an alist of the form (NAME . (EMAIL BACKEND-CONFIG)) from ACCOUNTS."
  (-map
   (lambda (account)
     ;; Concatenate the email and the backend config, and then make a alist with the name as the key.
     (let ((email (plist-get account :email))
           (backend (plist-get account :backend)))
       `(,(plist-get account :name) . ,(cons email (alist-get backend my/email-backend-configs)))))
   accounts))

;; Define the different accounts and their corresponding settings.
(setq smtpmail-multi-accounts (my/make-smtpmail-multi-accounts-alist my/email-accounts))
;; Specify association rules for the different accounts.
(setq smtpmail-multi-associations (-map (lambda (x) (list (plist-get x :email) (plist-get x :name))) my/email-accounts))

;; Make the send mail function use `smtpmail-multi-send-it'.
(setq message-send-mail-function 'smtpmail-multi-send-it)
;; Useful for debugging purposes.
(setq smtpmail-debug-info t)

;; Allow usage of org-mode to compose emails.
(use-package org-mime)
(setq org-mime-library 'mml)

;; `notmuch' and related.
;; Docs: https://notmuchmail.org/doc/latest/notmuch-emacs.html
(use-package notmuch
  :custom
  (notmuch-always-prompt-for-sender t)  ;; promt for sender since I have multiple accounts
  (notmuch-search-oldest-first nil)     ;; sort by newest
  (notmuch-saved-searches my/notmuch-saved-searches)
  )

;; Adds nice integration with `org-mode', e.g. storing of links.
(use-package ol-notmuch
  :ensure t)

;; Usually have to have point at the HTML to show it,
;; which is a bit annoying.
(defun notmuch-show-view-html+ ()
  "Open the text/html part of the current message using
`notmuch-show-view-part'."
  (interactive)
  (save-excursion
    (goto-char
     (prop-match-beginning
      (text-property-search-forward
       :notmuch-part
       "text/html"
       (lambda (value notmuch-part)
         (equal (plist-get notmuch-part :content-type)
                value)))))
    (notmuch-show-view-part)))

;; Custom HTML renderer for email which simply converts into the source.
;; Adapted version of `mm-shr'.
;; FIXME: When activating the `web-mode', we end up disabling the `notmuch' keybindings.
(defun my/mm-raw-html (handle)
  (let (charset coding char document)
    (mm-with-part (or handle (setq handle (mm-dissect-buffer t)))
      ;; Identify encoding.
      (setq case-fold-search t)
      (or (setq charset
		        (mail-content-type-get (mm-handle-type handle) 'charset))
	      (progn
	        (goto-char (point-min))
	        (and (re-search-forward "\
<meta\\s-+http-equiv=[\"']?content-type[\"']?\\s-+content=[\"']?\
text/html;\\s-*charset=\\([^\t\n\r \"'>]+\\)[^>]*>" nil t)
		         (setq coding (mm-charset-to-coding-system (match-string 1)
							                               nil t))))
	      (setq charset mail-parse-charset))
      ;; Decode and insert contents if it's not ASCII.
      (when (and (or coding
		             (setq coding (mm-charset-to-coding-system charset nil t)))
		         (not (eq coding 'ascii)))
	    (insert (prog1
		            (decode-coding-string (buffer-string) coding)
		          (erase-buffer)
		          (set-buffer-multibyte t))))
      ;; Go back to start of the buffer.
      (goto-char (point-min))
      (while (re-search-forward
	          "&#\\(?:x\\([89][0-9a-f]\\)\\|\\(1[2-5][0-9]\\)\\);" nil t)
	    (when (setq char
		            (cdr (assq (if (match-beginning 1)
				                   (string-to-number (match-string 1) 16)
				                 (string-to-number (match-string 2)))
			                   mm-extra-numeric-entities)))
	      (replace-match (char-to-string char))))
      ;; Remove "soft hyphens".
      (goto-char (point-min))
      (while (search-forward "­" nil t)
	    (replace-match "" t t))
      ;; Set the `document' variable to the raw buffer contents.
      (setq document (buffer-string))
      )
    ;; Display.
    (save-restriction
      (narrow-to-region (point) (point))
      ;; Insert the HTML contents.
      (insert document)
      ;; Activate HTML mode.
      (web-mode)
      ;; Fontify so we get syntax highlighting and stuff.
      (font-lock-fontify-buffer)
      ;; Indent the buffer.
      (save-excursion
        (indent-region (point-min) (point-max) nil))
      ;; If we're at the beginning of the buffer, i.e. it's empty,
      ;; insert a newline.
      (unless (bobp)
	    (insert "\n"))
      (mm-handle-set-undisplayer
       handle
       (let ((min (point-min-marker))
             (max (point-max-marker)))
         (lambda ()
	       (let ((inhibit-read-only t))
	         (delete-region min max))))))))

;; (setq mm-text-html-renderer 'my/mm-raw-html)
(setq mm-text-html-renderer 'shr)

;; Handle attachments a bit better.
;; Source: https://notmuchmail.org/emacstips/#index2h2
(defun tor/mm-pipe-- (handle cmd)
  ;; conveniently, '-' '-' a args to pdftotext and docx2txt.pl work fine
  ;; fixme: naming inconsistency (fn name and buffer name)
  (let ((buffer (get-buffer-create "*attachment-to-text*")))
    (with-current-buffer buffer
      (setq buffer-read-only nil)
      (erase-buffer))
    (with-temp-buffer
      ;; "based on mm-pipe-part in mm-decode.el"
      (mm-with-unibyte-buffer
        (mm-insert-part handle)
        (mm-add-meta-html-tag handle)
        (let ((coding-system-for-write 'binary))
          (call-process-region (point-min) (point-max)
                               cmd nil buffer nil "-" "-"))))
    (pop-to-buffer buffer)
    (goto-char (point-min))
    (text-mode)
    (visual-line-mode)
    (view-mode)))

(defun tor/notmuch-show-pop-attachment-to-buffer ()
  ;; "based on `notmuch-show-apply-to-current-part-handle'"
  (interactive)
  (let ((handle (notmuch-show-current-part-handle)))
    (unwind-protect
        (pcase (car (nth 1 handle))
          ("application/pdf"
           ;; Save and open.
           ;; FIXME: Fails if we decide not to save the file, e.g.
           ;; because it would override an existing one.
           (find-file (notmuch-show-save-part))
           ;; Alternative: convert to text and open that buffer instead.
           ;; (tor/mm-pipe-- handle "pdftotext")
           )
          ("image/png"
           ;; Save and open.
           (find-file (notmuch-show-save-part))
           )
          ("application/vnd.openxmlformats-officedocument.wordprocessingml.document"
           (tor/mm-pipe-- handle "docx2txt"))
          (_ (notmuch-show-save-part)))
      (kill-buffer (mm-handle-buffer handle)))))

(setq notmuch-show-part-button-default-action
      #'tor/notmuch-show-pop-attachment-to-buffer)

;; Overrides `org-notmuch-open' which apparently expects 2 arguments, while `org-mode'
;; (at least the one I've currently installed), expects 1 argument.
;; The 2nd argument in `org-notmuch-open' isn't used for anything anyways, so we might
;; as well just define one that ought to be compatible with either 1 or 2 args.
(defun org-notmuch-open (path &rest)
  "Follow a notmuch message link specified by PATH."
  (funcall org-notmuch-open-function path))
#+end_src

Note that in the above file I also load this =emails.el= file of mine.
I do this just to hide some details regarding my email accounts (mainly just to avoid spam); the format of the file is something like

#+begin_src emacs-lisp
;; Configs for the different email accounts.
(setq my/email-accounts '((:name account-1 :email "account-1@gmail.com" :backend gmail)
                          (:name account-2 :email "account-2@gmail.com" :backend gmail)
                          (:name account-3 :email "account-3@cam.ac.uk" :backend outlook)
                          (:name account-4 :email "acocunt-4@darwin.cam.ac.uk" :backend outlook)))

;; Saved notmuch searches.
(setq
 my/notmuch-saved-searches
 '((:name "inbox" :query "tag:inbox" :sort-order newest-first :key "i")
   (:name "unread" :query "tag:unread" :sort-order newest-first :key "u")
   (:name "flagged" :query "tag:flagged" :sort-order newest-first :key "f")
   (:name "all mail" :query "*" :sort-order newest-first :key "a")
   (:name "account-1" :query "tag:account1" :sort-order newest-first :key "t")
   (:name "account-2" :query "tag:account-2" :sort-order newest-first :key "o")
   (:name "account-3" :query "tag:account-3" :sort-order newest-first :key "d")
   (:name "account-4" :query "tag:account-4" :sort-order newest-first :key "g")))
#+end_src

* Interacting with the outside of Emacs

** TODO Emacs anywhere

https://github.com/zachcurry/emacs-anywhere

** =org-protocol.el= and [[https://github.com/sprig/org-capture-extension][org-capture-extension]] (for Firefox & Chrome)
1. Follow the instructions in the README for the extension.
2. Set up some capture templates (also described in the README).
   - NOTE: Example in the README uses =%c=, assuming the link passed to Emacs is added to the kill-ring. This seems to no longer be the case (if you look at the implementation =org-protocol-capture=); instead the link is added to =org-stored-links=, which means that we can include it in the capture template using =%a= or similar (see =org-capture-templates= for more info on alternatives).


* Result

** Full config
#+name: el-full-init
#+begin_src emacs-lisp :comments noweb :tangle init-full.el :noweb yes
<<pkg-management>>
<<basics>>
<<os-specifics>>

<<programming>>

<<org>>

<<mail>>
#+end_src


** Minimalist config
#+name: el-minimal-init
#+begin_src emacs-lisp :comments noweb :tangle init-minimal.el :noweb yes
<<pkg-management>>
<<basics>>
<<os-specifics>>
#+end_src


